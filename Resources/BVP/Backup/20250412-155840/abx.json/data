{
  "8a74818f94779d77019628a68d78270b": {
    "name": "DSM-DB-crud",
    "createdMillis": 1744438726012,
    "updatedMillis": 1744439453450,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "import json\nfrom urllib.request import urlopen\nfrom urllib.parse import urlparse\nimport urllib.request\nimport urllib.error\nimport ssl\nimport time\nimport os\nimport base64\nimport random\nimport string\nimport re\n\n# Aria has a max timeout of 900 seconds (15 minutes).\n# If an action doesn't complete its execution within 15 minutes, then it is marked as failed.\n# Specifying the timeout value to be 14 minutes, so we try to complete the deployment request (create db) operation within the max timeout of Aria which is 15 minutes.\n# If the create db operation takes longer, then we don't want to let vRA think it failed.\ntimeout = 840  # 14 minutes\n\nclass DsmClient:\n    \"\"\"\n        A client class for interacting with the DSM (Data Services Manager) API.\n\n        Args:\n            server (str): The DSM server URL.\n            username (str): The username for authentication.\n            password (str): The password for authentication.\n            skip_certificate_check (str): True/False If certificate should be used for authentication\n            root_ca (str): DSM root CA\n    \"\"\"\n\n    DEFAULT_DIRECTORY_SERVICE_NAME = \"ldap-default\"\n    DEFAULT_DIRECTORY_SERVICE_NAMESPACE = \"dsm-system\"\n\n    GROUP_INFRA = \"infrastructure.dataservices.vmware.com\"\n    GROUP_INFRAVER = \"v1alpha1\"\n    GROUP_DB = \"databases.dataservices.vmware.com\"\n    GROUP_DBVER = \"v1alpha1\"\n\n    DATABASE_BACKUP_LOCATION_LABEL = \"dsm.vmware.com/database-backup-location\"\n\n    def __init__(self, server, username, password, skip_certificate_check, root_ca) -> None:\n        \"\"\"\n            Initializes a new instance of the DsmClient class.\n\n            Args:\n                server (str): The DSM server URL.\n                username (str): The username for authentication.\n                password (str): The password for authentication.\n                skip_certificate_check (str): True/False If certificate should be used for authentication\n                root_ca (str): DSM root CA\n        \"\"\"\n\n        # Store the server URL, username, and password\n        self.server = server\n        self.username = username\n        self.password = password\n        self.root_ca = root_ca\n\n        if skip_certificate_check == \"True\":\n            # Create an SSL context to allow unverified connections\n            context = ssl.create_default_context()\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n            self.httpCtx = context\n        else:\n            # Create an SSL context to allow verified connections using certificates\n            self.httpCtx = self.getSSLContext()\n\n        # Call the login method to authenticate and retrieve the token\n        self.login()\n\n    def getSSLContext(self):\n        \"\"\"\n            This function creates and returns an SSL context.\n        \"\"\"\n        cert_content = self.root_ca\n\n        # Create an SSLContext instance by specifying the client TLS protocol\n        sslSettings = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\n        sslSettings.verify_mode = ssl.CERT_REQUIRED\n        sslSettings.check_hostname = True\n\n        # Load the CA certificates used for validating the peer's certificate\n        sslSettings.load_verify_locations(cadata=cert_content)\n\n        return sslSettings\n\n    def headers(self):\n        \"\"\"\n            Returns the headers for API requests.\n\n            Returns:\n                dict: The headers dictionary.\n        \"\"\"\n\n        return {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {self.token}',\n            'Accept': 'application/json, text/plain, */*'\n        }\n\n    def login(self):\n        \"\"\"\n            Logs in to the DSM server and retrieves the authentication token.\n            Raises an exception if the login fails.\n        \"\"\"\n\n        # Convert the login information to JSON format\n        loginInfo = json.dumps({\n            \"email\": self.username,\n            \"password\": self.password,\n        }).encode('utf-8')\n\n        # Construct the login URL\n        url = f\"https://{self.server}/provider/session\"\n\n        # Set the headers for the login request\n        headers = {\n            'Content-Type': 'application/json',\n        }\n\n        # Send the login request and retrieve the response\n        request = urllib.request.Request(url, headers=headers, data=loginInfo)\n        with urlopen(request, context=self.httpCtx) as response:\n            # Extract the authentication token from the response headers\n            auth = response.headers.get(\"Authorization\")\n            prefix = 'Bearer '\n            if not auth.startswith(prefix):\n                raise Exception(\"Login didn't return a Bearer token\")\n            self.token = auth[len(prefix):]\n\n    def get(self, path):\n        \"\"\"\n            Sends a GET request to the specified path and returns the response as a JSON object.\n\n            Args:\n                path (str): The path to send the GET request to.\n\n            Returns:\n                dict: The response as a JSON object.\n        \"\"\"\n\n        # Construct the URL using the server and path\n        url = f\"https://{self.server}{path}\"\n\n        # Create a request object with the URL and headers\n        request = urllib.request.Request(url, headers=self.headers())\n\n        # Send the GET request and retrieve the response\n        with urlopen(request, context=self.httpCtx) as response:\n            # Load the response as a JSON object\n            return json.load(response)\n\n    def delete(self, path):\n        \"\"\"\n            Sends a DELETE request to the specified path on the server.\n\n            Args:\n                path (str): The path to send the DELETE request to.\n\n            Returns:\n                dict: The JSON response from the server.\n        \"\"\"\n\n        # Construct the URL\n        url = f\"https://{self.server}{path}\"\n\n        # Create a DELETE request with the specified URL and headers\n        request = urllib.request.Request(url, headers=self.headers(), method=\"DELETE\")\n\n        # Send the request and handle the response\n        with urlopen(request, context=self.httpCtx) as response:\n            # Load the response as a JSON object\n            return json.load(response)\n\n    def postOrPut(self, path, jsonData, method):\n        \"\"\"\n            Sends a POST or PUT request to the specified path with the given JSON data.\n\n            Args:\n                path (str): The path to send the request to.\n                jsonData (dict): The JSON data to send in the request body.\n                method (str): The HTTP method to use (either \"POST\" or \"PUT\").\n\n            Returns:\n                dict: The JSON response from the server.\n        \"\"\"\n\n        # Construct the URL\n        url = f\"https://{self.server}{path}\"\n\n        # Encode the JSON data as bytes\n        body = json.dumps(jsonData).encode('utf-8')\n\n        # Create a request object with the URL, headers, and data\n        request = urllib.request.Request(url, headers=self.headers(), data=body, method=method)\n\n        # Send the request and handle the response\n        with urlopen(request, context=self.httpCtx) as response:\n            # Load the response as a JSON object\n            return json.load(response)\n    \n    def k8sClusterList(self, group, version, kindplural):\n        \"\"\"\n            Retrieves a kubernetes list of DB clusters.\n\n            Args:\n                group (str): The group name.\n                version (str): The version.\n                kindplural (str): The plural form of the kind.\n\n            Returns:\n                dict: The JSON response.\n        \"\"\"\n        path = f\"/apis/{group}/{version}/{kindplural}?limit=50&observe=response\"\n        return self.get(path)\n\n    def listInfraPolicies(self):\n        \"\"\"\n            Retrieves a list of infrastructure policies.\n\n            Returns:\n                dict: The JSON response\n        \"\"\"\n        return self.k8sClusterList(self.GROUP_INFRA, self.GROUP_INFRAVER, \"infrastructurepolicies\")\n\n    def k8sListDict(self, response):\n        \"\"\"\n            Converts a Kubernetes response to a dictionary.\n\n            Args:\n                response (dict): The Kubernetes response.\n\n            Returns:\n                dict: The converted dictionary.\n        \"\"\"\n        return dict([(x[\"metadata\"][\"name\"], x) for x in response[\"items\"]])\n\n    def listInfraPoliciesDict(self):\n        \"\"\"\n            Retrieves a dictionary of infrastructure policies.\n\n            Returns:\n                dict: The dictionary of infrastructure policies.\n        \"\"\"\n        return self.k8sListDict(self.listInfraPolicies())\n\n    def listBackupLocations(self):\n        \"\"\"\n            Retrieves a list of backup locations.\n\n            Returns:\n                list: The list of backup locations.\n        \"\"\"\n        backuplocation_names = []\n        backuplocation_out = self.k8sClusterList(self.GROUP_DB, self.GROUP_DBVER, \"backuplocations\")\n        backuplocation_details = self.k8sListDict(backuplocation_out)\n\n        # get all backup locations\n        for backup_name, backup_content in backuplocation_details.items():\n            # check if the relevant key exists, and if it is set to \"true\"\n            if nested_keys_exist(backup_content, \"metadata\", \"labels\", self.DATABASE_BACKUP_LOCATION_LABEL) \\\n                and backup_content[\"metadata\"][\"labels\"][self.DATABASE_BACKUP_LOCATION_LABEL] == \"true\":\n                    backuplocation_names.append(backup_name)\n        return backuplocation_names\n\n    def listVmClasses(self):\n        \"\"\"\n            Retrieves a list of VM classes.\n\n            Returns:\n                dict: The JSON response.\n        \"\"\"\n        return self.k8sClusterList(self.GROUP_INFRA, self.GROUP_INFRAVER, \"vmclasses\")\n\n    def listDbVersions(self, dbengine, dbname=None):\n        \"\"\"\n            Retrieves a list of database versions.\n\n            Args:\n                dbengine (str): The database engine.\n\n            Returns:\n                list: The list of database versions.\n        \"\"\"\n\n        db_versions, preview_db_versions = [], []\n\n        cluster_exists = False\n        if dbengine == \"Postgres\":\n            service_type = \"vmware-sql-postgres\"\n            try:\n                cluster = self.getPg(dbname)\n                cluster_exists = True\n            except urllib.error.HTTPError as err:\n                if err.code == 404:\n                    pass # just means cluster isnt found\n                else:\n                    raise err # else propagate error\n        elif dbengine == \"MySQL\":\n            service_type = \"vmware-sql-mysql\"\n            try:\n                cluster = self.getMysql(dbname)\n                cluster_exists = True\n            except urllib.error.HTTPError as err:\n                if err.code == 404:\n                    pass # just means cluster isnt found\n                else:\n                    raise err # else propagate error\n        else:\n            raise ValueError(f\"unknown DB engine: {dbengine}\")\n\n        if cluster_exists: # if it is a pre-existing deployment\n            if nested_keys_exist(cluster, \"status\", \"availableUpgrades\"):\n                for upgrade_option in cluster[\"status\"][\"availableUpgrades\"]:\n                    db_versions.append(upgrade_option[\"version\"])\n            if nested_keys_exist(cluster, \"status\", \"upgradeStatus\", \"currentVersion\"):\n                db_versions.append(cluster[\"status\"][\"upgradeStatus\"][\"currentVersion\"])\n        else: # new creations\n            path = f\"/apis/releases.dataservices.vmware.com/v1alpha2/dataserviceversions\"\n            ds_out = self.get(path)\n\n            for item in ds_out[\"items\"]:\n                approval_val = item[\"spec\"][\"approval\"]\n                service_val = item[\"spec\"][\"serviceType\"]\n                version_val = item[\"spec\"][\"version\"]\n                suffix_val = \"\"\n\n                if approval_val != \"CreateDisabled\" and service_val == service_type:\n                    if approval_val == \"Preview\":\n                        suffix_val = \" (Preview)\"\n                        db_version_val = version_val + suffix_val\n                        preview_db_versions.append(db_version_val)\n                    else:\n                        db_version_val = version_val + suffix_val\n                        db_versions.append(db_version_val)\n\n        # The preview db versions should be added at the end of the list\n        db_versions.extend(preview_db_versions)\n        return db_versions\n\n\n    def listClusterTopologies(self, dbengine):\n        \"\"\"\n            Returns a list of cluster topologies based on the specified database engine.\n\n            Args:\n                dbengine (str): The database engine. Valid values are \"Postgres\" and \"MySQL\".\n            Returns:\n                list: A list of cluster topologies.\n        \"\"\"\n\n        topologies = []\n        if dbengine == \"Postgres\":\n            topologies = ['1 (1 (Primary + Monitor), 0 Replica)', '3 (1 Primary, 1 Replica, 1 Monitor)']\n        elif dbengine == \"MySQL\":\n            topologies = ['1 (1 Primary, 0 Replica)', '3 (1 Primary, 2 Replicas)']\n        return topologies\n\n    def createPg(self, data):\n        \"\"\"\n            Creates a PostgreSQL cluster.\n\n            Args:\n                data (dict): The data to be sent in the request body.\n\n            Returns:\n                None\n        \"\"\"\n\n        # Construct the path for creating a PostgreSQL cluster\n        path = f\"/apis/{self.GROUP_DB}/{self.GROUP_DBVER}/namespaces/default/postgresclusters\"\n\n        # Send a POST request with the specified path, data, and method\n        self.postOrPut(path, data, \"POST\")\n\n    def createDatabaseConfig(self, data):\n        \"\"\"\n            Creates a database configuration.\n\n            Args:\n                data (dict): The data to be sent in the request body.\n\n            Returns:\n                None\n        \"\"\"\n        # Construct the path for creating a database configuration\n        path = f\"/apis/{self.GROUP_DB}/{self.GROUP_DBVER}/namespaces/default/databaseconfigs\"\n\n        # Send a POST request with the specified path, data, and method\n        self.postOrPut(path, data, \"POST\")\n\n    def pgPath(self, name):\n        \"\"\"\n            Constructs the path for a PostgreSQL cluster.\n\n            Args:\n                name (str): The name of the PostgreSQL cluster.\n\n            Returns:\n                str: The constructed path.\n        \"\"\"\n        return f\"/apis/{self.GROUP_DB}/{self.GROUP_DBVER}/namespaces/default/postgresclusters/{name}\"\n\n    def deletePg(self, name):\n        \"\"\"\n            Deletes a PostgreSQL cluster.\n\n            Args:\n                name (str): The name of the PostgreSQL cluster.\n\n            Returns:\n                None\n        \"\"\"\n        return self.delete(self.pgPath(name))\n    \n    def getPg(self, name):\n        \"\"\"\n            Retrieves information about a PostgreSQL cluster.\n\n            Args:\n                name (str): The name of the PostgreSQL cluster.\n\n            Returns:\n                dict: The information about the PostgreSQL cluster.\n        \"\"\"\n        return self.get(self.pgPath(name))\n    \n    def updatePg(self, pg):\n        \"\"\"\n            Updates a PostgreSQL cluster.\n\n            Args:\n                pg (dict): The updated data for the PostgreSQL cluster.\n\n            Returns:\n                None\n        \"\"\"\n        path = self.pgPath(pg[\"metadata\"][\"name\"])\n        return self.postOrPut(path, pg, \"PUT\")\n\n    def createMysql(self, data):\n        \"\"\"\n            Creates a MySQL cluster.\n\n            Args:\n                data (dict): The data to be sent in the request body.\n\n            Returns:\n                None\n        \"\"\"\n        path = f\"/apis/{self.GROUP_DB}/{self.GROUP_DBVER}/namespaces/default/mysqlclusters\"\n        self.postOrPut(path, data, \"POST\")\n\n    def mysqlPath(self, name):\n        \"\"\"\n            Constructs the path for a MySQL cluster.\n\n            Args:\n                name (str): The name of the MySQL cluster.\n\n            Returns:\n                str: The constructed path.\n        \"\"\"\n        return f\"/apis/{self.GROUP_DB}/{self.GROUP_DBVER}/namespaces/default/mysqlclusters/{name}\"\n\n    def deleteMysql(self, name):\n        \"\"\"\n            Deletes a MySQL cluster.\n\n            Args:\n                name (str): The name of the MySQL cluster.\n\n            Returns:\n                None\n        \"\"\"\n        return self.delete(self.mysqlPath(name))\n\n    def getMysql(self, name):\n        \"\"\"\n            Retrieves information about a MySQL cluster.\n\n            Args:\n                name (str): The name of the MySQL cluster.\n\n            Returns:\n                dict: The information about the MySQL cluster.\n        \"\"\"\n        return self.get(self.mysqlPath(name))\n\n    def updateMysql(self, mysql):\n        \"\"\"\n            Updates a MySQL cluster.\n\n            Args:\n                mysql (dict): The updated data for the MySQL cluster.\n\n            Returns:\n                None\n        \"\"\"\n        path = self.mysqlPath(mysql[\"metadata\"][\"name\"])\n        return self.postOrPut(path, mysql, \"PUT\")\n\n    def deleteDatabaseConfig(self, name):\n        \"\"\"\n            Deletes a database configuration.\n\n            Args:\n                name (str): The name of the database configuration.\n\n            Returns:\n                None\n        \"\"\"\n        path = f\"/apis/{self.GROUP_DB}/{self.GROUP_DBVER}/namespaces/default/databaseconfigs/{name}\"\n        return self.delete(path)\n\n    def isDataServiceReleaseReady(self, ds, condType):\n        \"\"\"\n            Checks if the data service release is ready based on the specified condition type.\n\n            Args:\n                ds (dict): The data service object.\n                condType (str): The condition type to check.\n\n            Returns:\n                bool: True if the data service release is ready, False otherwise.\n        \"\"\"\n        for item in ds[\"items\"]:\n            condList = item.get('status', {}).get('conditions', [])\n            for cond in condList:\n                if cond.get('type') == condType and cond.get('status') == \"True\":\n                    return True\n            return False\n\n    def getDBConnectionString(self, inputs):\n        \"\"\"\n            Retrieves the database connection string.\n\n            Args:\n                inputs (dict): The input parameters for the connection string.\n\n            Returns:\n                str: The database connection string.\n        \"\"\"\n        dbengine = (inputs[\"dbengine\"]).lower()\n        admin_username = inputs[\"adminUsername\"]\n        conn_host = inputs[\"conn_host\"]\n        conn_port = str(inputs[\"conn_port\"]).split(\".\")[0]\n        deployment_name = \"pg-\"+inputs[\"deploymentName\"] if dbengine == \"postgres\" else \"mysql-\"+inputs[\"deploymentName\"]\n        database_name = inputs[\"databaseName\"]\n\n        path = f\"/api/v1/namespaces/default/secrets/{deployment_name}\"\n        out = self.get(path)\n\n        if dbengine == \"postgres\":\n            db_name = database_name\n        else:\n            db_name = \"mysqlappuser_data\"\n\n        password = out[\"data\"][\"password\"]\n        decoded_password = base64.b64decode(password)\n        db_password = decoded_password.decode(\"utf-8\")\n\n        connection_string = dbengine+\"://\"+admin_username+\":\"+db_password+\"@\"+conn_host+\":\"+conn_port+\"/\"+db_name\n        return connection_string\n\ndef nested_keys_exist(element: dict, *keys: string):\n    \"\"\"\n        Check if *keys (nested) exists in `element` (dict).\n\n        Args:\n            element (dict): Dictionary to search\n            *keys (string): Ordered key[s] to look for in `element`\n        Returns:\n            bool: True if key[s] exists, False if any are missing\n    \"\"\"\n    if not isinstance(element, dict):\n        raise AttributeError('nested_keys_exist() expects dict as first argument.')\n    if len(keys) == 0:\n        raise AttributeError('nested_keys_exist() expects at least two arguments, one given.')\n\n    _element = element\n    for key in keys:\n        try:\n            _element = _element[key]\n        except KeyError:\n            return False\n    return True\n\ndef is_value_larger_unit(unit: str, value1: str, value2: str):\n    \"\"\"\n        Check if value1 is bigger than value2 when dealing with unit suffixed storage strings\n\n        Args:\n            unit (string): Unit to be compared, should be same for both values\n            value1 (string): First value of form \"<NUMBER><UNIT>\"\n            value2 (string): Second value of form \"<NUMBER><UNIT>\"\n        Returns:\n            bool: True if value1 > value2\n    \"\"\"\n\n    if unit not in value1 or unit not in value2:\n        raise ValueError(f\"Incorrect value passed, string with '{unit}' suffix expected. Got {value1} and {value2}\")\n\n    return int(value1.removesuffix(unit)) > int(value2.removesuffix(unit))\n\ndef checkDsmParams(envlist):\n    \"\"\"\n        Validate the length of envlist and also the length of\n        individual items in the env list\n        Args:\n            envlist\n        Returns: True or False(if envList is not proper)\n        Valid env list is [dsmHost,dsmUserID,dsmPassword,dsmSkipCertificateCheck,dsmRootCA]\n    \"\"\"\n    if len(envlist) == 5:\n        if all(len(element) > 0 for element in envlist):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\ndef getDsmConnectionConfig(input):\n    \"\"\"\n        Returns a dictionary containing the DSM connection configuration.\n\n        Args:\n            input (list): A list containing the DSM host, user ID, password, certificate check and root ca.\n\n        Returns:\n            dict: A dictionary containing the DSM connection configuration with keys 'dsmHost', 'dsmUserID', 'dsmPassword', 'dsmSkipCertificateCheck' and 'dsmRootCA'.\n    \"\"\"\n    connectionConfig = {\"dsmHost\":input[0],\"dsmUserID\":input[1],\"dsmPassword\":input[2],\"dsmSkipCertificateCheck\":input[3],\"dsmRootCA\":input[4]}\n    return connectionConfig\n\n\ndef getDsmParamsForAbx(context,inputs):\n    \"\"\"\n        Retrieves the DSM connection parameters for ABX.\n\n        Args:\n            inputs (list): A list containing the DSM host, user ID, password, certificate check and root CA.\n\n        Returns:\n            dict: A dictionary containing the DSM connection configuration.\n    \"\"\"\n    try:\n         dsmUserID = context.getSecret(inputs['dsmUserID'])\n         dsmPassword = context.getSecret(inputs['dsmPassword'])\n         dsmHost = context.getSecret(inputs['dsmHost'])\n         dsmSkipCertificateCheck = context.getSecret(inputs['dsmSkipCertificateCheck'])\n         dsmRootCA = context.getSecret(inputs['dsmRootCA'])\n         envList = [dsmHost, dsmUserID, dsmPassword, dsmSkipCertificateCheck, dsmRootCA]\n    except Exception as e:\n            raise ValueError(\"Unable to retrieve DSM connection params, Check \"\n                             \"[dsmHost,dsmUserID,dsmPassword,dsmSkipCertificateCheck,dsmRootCA] secrets configuration in Aria/Vra.\")\n    if not checkDsmParams(envList):\n        raise ValueError(\"Dsm Connection parameters are invalid, Check \"\n                            \"[dsmHost,dsmUserID,dsmPassword,dsmSkipCertificateCheck,dsmRootCA] secrets configuration.\")\n\n    return getDsmConnectionConfig(envList)\n\ndef getDsmParamsForVro():\n    \"\"\"\n        Retrieves the DSM connection parameters for VRO.\n\n        Args:\n            None\n\n        Returns:\n            dict: A dictionary containing the DSM connection configuration.\n    \"\"\"\n    dsmUserID = os.environ[\"dsmUserID\"]\n    dsmPassword = os.environ[\"dsmPassword\"]\n    dsmHost = os.environ[\"dsmHost\"]\n    dsmSkipCertificateCheck = os.environ[\"dsmSkipCertificateCheck\"]\n    dsmRootCA = os.environ[\"dsmRootCA\"]\n    envList = [dsmHost, dsmUserID, dsmPassword, dsmSkipCertificateCheck, dsmRootCA]\n    if not checkDsmParams(envList):\n        raise ValueError(\"Dsm Connection parameters are invalid, Check action's environment\")\n\n    return getDsmConnectionConfig(envList)\n\ndef getAriaInstanceID():\n    \"\"\"\n        This function gets aria instance ID  by accessing raw\n        input file and obtains aria instance ID/url from system inputs dictionary\n        Args:\n            None\n        Returns:\n            str: The aria instance id\n    \"\"\"\n    inputs_file = open(os.getenv('INPUTS_FILE'))\n    decoded_inputs = base64.b64decode(inputs_file.read()).decode('utf-8')\n    inputs = json.loads(decoded_inputs)\n    url = inputs[\"__system.inputs\"][\"__callback.url\"]\n    parsed_url = urlparse(url)\n    ariaInstanceID = parsed_url.netloc\n    return ariaInstanceID\n\n\ndef abxHandler(context, inputs):\n    \"\"\"\n        Handles the ABX event and performs the necessary operations based on the inputs.\n\n        Args:\n            context: The context object containing information about the ABX event.\n            inputs: The inputs provided for the ABX event.\n\n        Returns:\n            outputs: The outputs generated by the ABX handler.\n    \"\"\"\n\n    outputs = inputs\n    createdIn = \"aria\"\n    dsmConnConfig = getDsmParamsForAbx(context, inputs)\n    ariaInstanceID = getAriaInstanceID()\n\n    # Initialize DSM client\n    dsmClient = DsmClient(dsmConnConfig[\"dsmHost\"],dsmConnConfig[\"dsmUserID\"],dsmConnConfig[\"dsmPassword\"],dsmConnConfig[\"dsmSkipCertificateCheck\"],dsmConnConfig[\"dsmRootCA\"])\n\n    def defByPg(inputs):\n        \"\"\"\n            Constructs the request body for creating a PostgresCluster in DSM.\n\n            Args:\n                inputs (dict): A dictionary containing the input parameters for creating the PostgresCluster.\n\n            Returns:\n                dict: The request body for creating the PostgresCluster.\n        \"\"\"\n        regex_deployment_name = re.compile(r\"^[a-zA-Z0-9-]+$\")\n        if len(inputs[\"deploymentName\"]) < 4 or len(inputs[\"deploymentName\"]) > 20 or not regex_deployment_name.match(inputs[\"deploymentName\"]):\n            raise ValueError(\"RECREATE REQUIRED: Deployment Name is not valid, must be between 4-20 characters long and follow pattern '^[a-zA-Z0-9-]+$'\")\n\n        request_body = {\n            \"metadata\": {\n                \"name\": inputs[\"deploymentName\"],\n                \"labels\": {\n                    \"dsm.vmware.com/aria-automation-instance\": ariaInstanceID,\n                    \"dsm.vmware.com/aria-automation-project\": inputs[\"ariaProject\"],\n                    \"dsm.vmware.com/created-in\": createdIn\n                }\n            },\n            \"spec\": {\n                \"version\": (inputs[\"dbversion\"]).split(\" \")[0],\n                \"vmClass\": {\n                    \"name\": inputs[\"vmClass\"]\n                },\n                \"adminUsername\": inputs[\"adminUsername\"],\n                \"databaseName\": inputs[\"databaseName\"],\n                \"storageSpace\": f'{inputs[\"storageSpace\"]}Gi',\n                \"infrastructurePolicy\": {\n                    \"name\": inputs[\"infraPolicy\"]\n                },\n                \"storagePolicyName\": inputs[\"storagePolicy\"],\n                \"replicas\": getReplicaCount(inputs)\n            },\n            \"apiVersion\": f\"{dsmClient.GROUP_DB}/{dsmClient.GROUP_DBVER}\",\n            \"kind\": \"PostgresCluster\"\n        }\n\n        if inputs[\"enableDirectoryServiceAuthentication\"]:\n            # Configure directory service authentication if enabled\n            directory_service = {\n                \"name\": dsmClient.DEFAULT_DIRECTORY_SERVICE_NAME,\n                \"namespace\": dsmClient.DEFAULT_DIRECTORY_SERVICE_NAMESPACE\n            }\n\n            request_body[\"spec\"][\"directoryService\"] = directory_service\n\n        if inputs[\"enableBackups\"]:\n            # Configure backup settings if enabled\n            backup_config = {\n                    \"backupRetentionDays\": inputs[\"backupRetentionDays\"],\n                    \"schedules\": [{\"name\": \"default-full-backup\", \"type\": \"full\", \"schedule\": \"59 23 * * 6\"},\n                                  {\"name\": \"default-incremental-backup\", \"type\": \"incremental\", \"schedule\": \"59 23 1/1 * *\"}]\n            }\n            backup_location = {\n                \"name\": inputs[\"backupLocation\"]\n            }\n\n            request_body[\"spec\"][\"backupConfig\"] = backup_config\n            request_body[\"spec\"][\"backupLocation\"] = backup_location\n\n        if inputs[\"enableMaintenanceWindow\"]:\n            # Configure maintenance window settings if enabled\n            maintenance_window = {\n                \"duration\": f'{inputs[\"maintenanceDuration\"]}h',\n                \"startDay\": inputs[\"maintenanceDayOfWeek\"],\n                \"startTime\": inputs[\"maintenanceWindowHours\"] + \":\" + inputs[\"maintenanceWindowMins\"]\n            }\n            request_body[\"spec\"][\"maintenanceWindow\"] = maintenance_window\n\n        if inputs[\"enableDbOptions\"]:\n            # Configure custom database options if enabled\n            request_body[\"spec\"][\"databaseConfig\"] = {\n                \"name\": createAndGetDbConfig(inputs)\n            }\n\n        return request_body\n\n    def defByMysql(inputs):\n        \"\"\"\n            Constructs the request body for creating a MySQLCluster in DSM.\n\n            Args:\n                inputs (dict): A dictionary containing the input parameters for creating the MySQLCluster.\n\n            Returns:\n                dict: The request body for creating a MySQLCluster.\n        \"\"\"\n        regex_deployment_name = re.compile(r\"^[a-zA-Z0-9-]+$\")\n        if len(inputs[\"deploymentName\"]) < 4 or len(inputs[\"deploymentName\"]) > 20 or not regex_deployment_name.match(inputs[\"deploymentName\"]):\n            raise ValueError(\"RECREATE REQUIRED: Deployment Name is not valid, must be between 4-20 characters long and follow pattern '^[a-zA-Z0-9-]+$'\")\n\n        request_body = {\n            \"metadata\": {\n                \"name\": inputs[\"deploymentName\"],\n                \"labels\": {\n                    \"dsm.vmware.com/aria-automation-instance\": ariaInstanceID,\n                    \"dsm.vmware.com/aria-automation-project\": inputs[\"ariaProject\"],\n                    \"dsm.vmware.com/created-in\": createdIn\n                }\n            },\n            \"spec\": {\n                \"version\": (inputs[\"dbversion\"]).split(\" \")[0],\n                \"vmClass\": {\n                    \"name\": inputs[\"vmClass\"]\n                },\n                \"storageSpace\": f'{inputs[\"storageSpace\"]}Gi',\n                \"infrastructurePolicy\": {\n                    \"name\": inputs[\"infraPolicy\"]\n                },\n                \"storagePolicyName\": inputs[\"storagePolicy\"],\n                \"members\": getReplicaCount(inputs)\n            },\n            \"apiVersion\": f\"{dsmClient.GROUP_DB}/{dsmClient.GROUP_DBVER}\",\n            \"kind\": \"MySQLCluster\"\n        }\n\n        if inputs[\"enableDirectoryServiceAuthentication\"]:\n            # Configure directory service authentication if enabled\n            directory_service = {\n                \"name\": dsmClient.DEFAULT_DIRECTORY_SERVICE_NAME,\n                \"namespace\": dsmClient.DEFAULT_DIRECTORY_SERVICE_NAMESPACE\n            }\n\n            request_body[\"spec\"][\"directoryService\"] = directory_service\n\n        if inputs[\"enableBackups\"]:\n            # Configure backup settings if enabled\n            backup_config = {\n                    \"backupRetentionDays\": inputs[\"backupRetentionDays\"],\n                    \"schedules\": [{\"name\": \"default-full-backup\", \"type\": \"full\", \"schedule\": \"59 23 * * 6\"}]\n            }\n            backup_location = {\n                \"name\": inputs[\"backupLocation\"]\n            }\n\n            request_body[\"spec\"][\"backupConfig\"] = backup_config\n            request_body[\"spec\"][\"backupLocation\"] = backup_location\n\n        if inputs[\"enableMaintenanceWindow\"]:\n            # Configure maintenance window settings if enabled\n            maintenance_window = {\n                \"duration\": f'{inputs[\"maintenanceDuration\"]}h',\n                \"startDay\": inputs[\"maintenanceDayOfWeek\"],\n                \"startTime\": inputs[\"maintenanceWindowHours\"] + \":\" + inputs[\"maintenanceWindowMins\"]\n            }\n            request_body[\"spec\"][\"maintenanceWindow\"] = maintenance_window\n\n        if inputs[\"enableDbOptions\"]:\n            # Configure custom database options if enabled\n            request_body[\"spec\"][\"databaseConfig\"] = {\n                \"name\": createAndGetDbConfig(inputs)\n            }\n\n        return request_body\n\n    def getCondition(db: object, condType: str) -> object:\n        \"\"\"\n            Retrieves a condition from the database based on the condition type.\n\n            Args:\n                db (object): The database object.\n                condType (str): The type of condition to retrieve.\n\n            Returns:\n                object: The condition object if found, None otherwise.\n        \"\"\"\n        condList = db.get('status', {}).get('conditions', [])  # Get the list of conditions from the database object\n        for cond in condList:  # Iterate through each condition\n            if cond.get('type') == condType:  # Check if the condition type matches the desired condition type\n                return cond  # Return the condition object if found\n        return None  # Return None if the condition is not found\n\n    def isDBReady(db: object) -> bool:\n        \"\"\"\n            Check if the database is ready.\n\n            Args:\n                db (object): The database object.\n\n            Returns:\n                bool: True if the database is ready, False otherwise.\n        \"\"\"\n\n        # Get the \"Ready\" condition from the database object\n        cond = getCondition(db, \"Ready\")\n\n        # If the \"Ready\" condition is not found, return False\n        if cond is None:\n            return False\n\n        # Return True if the status of the \"Ready\" condition is \"True\", False otherwise\n        return cond.get('status') == \"True\"\n\n    def extractStatusInfo(pg):\n        \"\"\"\n            Extracts status information from a given PostgreSQL connection.\n\n            Args:\n                pg (dict): A dictionary containing the PostgreSQL connection information.\n\n            Returns:\n                dict: A dictionary containing the extracted status information.\n                      - conn_host (str): The host of the PostgreSQL connection.\n                      - conn_dbname (str): The name of the PostgreSQL database.\n                      - conn_username (str): The username used for the PostgreSQL connection.\n                      - conn_port (int): The port number of the PostgreSQL connection.\n                      - ready (str): Indicates whether the database is ready or not (\"True\" or \"False\").\n        \"\"\"\n        statusInfo = {}\n        pgStatus = pg[\"status\"]\n        pgConn = pgStatus.get(\"connection\", {})\n        statusInfo[\"conn_host\"] = pgConn.get(\"host\")  # Extract the host of the PostgreSQL connection\n        statusInfo[\"conn_dbname\"] = pgConn.get(\"dbname\")  # Extract the name of the PostgreSQL database\n        statusInfo[\"conn_username\"] = pgConn.get(\"username\")  # Extract the username used for the PostgreSQL connection\n        statusInfo[\"conn_port\"] = pgConn.get(\"port\")  # Extract the port number of the PostgreSQL connection\n        statusInfo[\"ready\"] = \"True\" if isDBReady(pg) else \"False\"  # Check if the database is ready and set the \"ready\" flag accordingly\n        return statusInfo\n\n    def extractStatusInfoMysql(mysql):\n        \"\"\"\n            Extracts status information from a MySQL object.\n\n            Args:\n                mysql (dict): The MySQL object containing status information.\n\n            Returns:\n                dict: A dictionary containing the extracted status information.\n                      - conn_host (str): The host of the MySQL connection.\n                      - conn_dbname (str): The name of the MySQL database.\n                      - conn_username (str): The username used for the MySQL connection.\n                      - conn_port (int): The port used for the MySQL connection.\n                      - ready (str): Indicates whether the MySQL database is ready or not.\n        \"\"\"\n        statusInfo = {}\n        mysqlStatus = mysql[\"status\"]\n        mysqlConn = mysqlStatus.get(\"connection\",{})\n        statusInfo[\"conn_host\"] = mysqlConn.get(\"host\")  # Extract the host of the MySQL connection\n        statusInfo[\"conn_dbname\"] = mysqlConn.get(\"dbname\")  # Extract the name of the MySQL database\n        statusInfo[\"conn_username\"] = mysqlConn.get(\"username\")  # Extract the username used for the MySQL connection\n        statusInfo[\"conn_port\"] = mysqlConn.get(\"port\")  # Extract the port used for the MySQL connection\n        statusInfo[\"ready\"] = \"True\" if isDBReady(mysql) else \"False\"  # Check if the MySQL database is ready and set the \"ready\" flag accordingly\n        return statusInfo\n    \n    def waitForDBReady(dbName: str, timeout: int, dbEngine: str):\n        \"\"\"\n            Waits for the specified database to be ready within the given timeout period.\n\n            Args:\n                dbName (str): The name of the database.\n                timeout (int): The maximum time to wait for the database to be ready, in seconds.\n                dbEngine (str): The type of database engine (e.g., \"Postgres\", \"MySQL\").\n        \"\"\"\n        now = time.time()  # Get the current time\n        while (time.time() - now) < timeout:  # Loop until the timeout period has exceeded\n            if dbEngine == \"Postgres\":\n                db_object = dsmClient.getPg(dbName)  # Get the Postgres database object\n            if dbEngine == \"MySQL\":\n                db_object = dsmClient.getMysql(dbName)  # Get the MySQL database object\n            if isDBReady(db_object):  # Check if the database is ready\n                return db_object  # If the database is ready, return the database object\n            cond = getCondition(db_object, \"Ready\")  # Get the \"Ready\" condition from the database object\n            time.sleep(10)  # Sleep for 10 seconds before checking again\n        # If the database creation takes more than 14 minutes, return the db object to indicate success to Aria\n        return db_object\n\n    def getReplicaCount(inputs):\n        \"\"\"\n            Returns the replica count based on the inputs.\n\n            Parameters:\n            inputs (dict): A dictionary containing the input values.\n\n            Returns:\n            int: The replica count.\n        \"\"\"\n        if inputs[\"dbengine\"] == \"Postgres\":\n            # For Postgres, the topology value will be of the format: '1 (1 (Primary + Monitor), 0 Replica)'.\n            replica_val = inputs[\"topology\"].split(\",\")[1]  # Split on comma and get the replica details\n            replica_count = int(replica_val.split(\" \")[1])  # Split on space and get the replica count\n            return replica_count\n        else:\n            # For Mysql, the topology value will be of the format: '5 (1 Primary, 4 Replicas)'.\n            # The first integer denotes the member count in a Mysql cluster.\n            member_count = int(inputs[\"topology\"].split(\" \")[0])\n            return member_count\n\n    def createAndGetDbConfig(inputs):\n        \"\"\"\n            Creates a database configuration based on the provided inputs (db options) and returns its metadata name.\n\n            Args:\n                inputs (dict): A dictionary containing the input parameters (db options) for creating the database configuration.\n\n            Returns:\n                str: The metadata name of the created database configuration.\n        \"\"\"\n        dboptions_dict = {}\n        params_dict = {}\n\n        # Parse the dbOptions and create a dictionary\n        for option in inputs[\"dbOptions\"]:\n            key = option.split(\"=\")[0]\n            val = option.split(\"=\")[1]\n            dboptions_dict[key] = val\n\n        # Generate a random alphanumeric string and epoch time for metadata name\n        random_alphanum_str = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))\n        epoch_time = int(time.time())\n        metadata_name = \"db-config-\" + random_alphanum_str + \"-\" + str(epoch_time)\n\n        # Create the request body for creating the database configuration\n        request_body = {\n            \"metadata\": {\n                \"name\": metadata_name\n            },\n            \"apiVersion\": \"databases.dataservices.vmware.com/v1alpha1\",\n            \"kind\": \"DatabaseConfig\"\n        }\n\n        params_dict[\"params\"] = dboptions_dict\n        request_body[\"spec\"] = params_dict\n\n        # Call the DSM client to create the database configuration\n        dsmClient.createDatabaseConfig(request_body)\n\n        # Return the metadata name of the created database configuration\n        return metadata_name\n\n    op = None\n    if nested_keys_exist(inputs, \"__metadata\", \"operation\"):\n        op = inputs[\"__metadata\"][\"operation\"]\n\n    if op == \"create\":\n        outputs['create'] = True\n\n        if inputs[\"dbengine\"] == \"Postgres\":\n            data = defByPg(inputs)\n            outputs['id'] = data[\"metadata\"][\"name\"]\n            dsmClient.createPg(data)\n        if inputs[\"dbengine\"] == \"MySQL\":\n            data = defByMysql(inputs)\n            outputs['id'] = data[\"metadata\"][\"name\"]\n            dsmClient.createMysql(data)\n        db_object = waitForDBReady(outputs[\"id\"], timeout, inputs[\"dbengine\"])\n\n        # Update the latest status information of the database.\n        if inputs[\"dbengine\"] == \"Postgres\":\n            outputs.update(extractStatusInfo(db_object))\n        if inputs[\"dbengine\"] == \"MySQL\":\n            outputs.update(extractStatusInfoMysql(db_object))\n    elif op == \"update\":\n        origDbConfigName = \"\"\n\n        if inputs[\"dbengine\"] == \"Postgres\":\n            db = dsmClient.getPg(inputs[\"id\"])\n            modifiedDb = defByPg(inputs)\n        elif inputs[\"dbengine\"] == \"MySQL\":\n            db = dsmClient.getMysql(inputs[\"id\"])\n            modifiedDb = defByMysql(inputs)\n\n        # Get the original databaseConfig name in order to perform the necessary cleanup.\n        if \"databaseConfig\" in db[\"spec\"]:\n            origDbConfigName = db[\"spec\"][\"databaseConfig\"][\"name\"]\n\n        modifiedSpec = modifiedDb[\"spec\"]\n        db[\"spec\"][\"vmClass\"] = modifiedSpec[\"vmClass\"]\n        db[\"spec\"][\"version\"] = modifiedSpec[\"version\"]\n\n        # Only allow the increase of the storage space.\n        if is_value_larger_unit(\"Gi\", modifiedSpec[\"storageSpace\"], db[\"spec\"][\"storageSpace\"]):\n            db[\"spec\"][\"storageSpace\"] = modifiedSpec[\"storageSpace\"]\n\n        if \"maintenanceWindow\" in modifiedDb[\"spec\"]:\n            db[\"spec\"][\"maintenanceWindow\"] = modifiedSpec[\"maintenanceWindow\"]\n        else:\n            # If the user is disabling the maintenance-window, then remove the maintenanceWindow key from the request-body.\n            if \"maintenanceWindow\" in db[\"spec\"]:\n                del db[\"spec\"][\"maintenanceWindow\"]\n\n        if \"databaseConfig\" in modifiedDb[\"spec\"]:\n            db[\"spec\"][\"databaseConfig\"] = modifiedSpec[\"databaseConfig\"]\n        else:\n            # If the user is disabling the db-options, then remove the databaseConfig key from the request-body.\n            if \"databaseConfig\" in db[\"spec\"]:\n                del db[\"spec\"][\"databaseConfig\"]\n\n        if \"directoryService\" in modifiedDb[\"spec\"]:\n            db[\"spec\"][\"directoryService\"] = modifiedSpec[\"directoryService\"]\n        else:\n            # If the user is disabling directory service, delete the key from the body\n            if \"directoryService\" in db[\"spec\"]:\n                del db[\"spec\"][\"directoryService\"]\n\n        if (\"backupConfig\" in modifiedDb[\"spec\"]) and (\"backupLocation\" in modifiedDb[\"spec\"]):\n            db[\"spec\"][\"backupConfig\"] = modifiedSpec[\"backupConfig\"]\n            db[\"spec\"][\"backupLocation\"] = modifiedSpec[\"backupLocation\"]\n\n        if inputs[\"dbengine\"] == \"Postgres\":\n            # Only allow the scale up of the replicas.\n            if modifiedSpec[\"replicas\"] >= db[\"spec\"][\"replicas\"]:\n                db[\"spec\"][\"replicas\"] = modifiedSpec[\"replicas\"]\n            dsmClient.updatePg(db)\n        if inputs[\"dbengine\"] == \"MySQL\":\n            # Only allow the scale up of the members\n            if modifiedSpec[\"members\"] >= db[\"spec\"][\"members\"]:\n                db[\"spec\"][\"members\"] = modifiedSpec[\"members\"]\n            dsmClient.updateMysql(db)\n\n        # If the original request-body had an entry for 'databaseconfig', then perform the necessary cleanup.\n        if origDbConfigName != \"\":\n            dsmClient.deleteDatabaseConfig(origDbConfigName)\n        # XXX: Wait\n    elif op == \"read\":\n        if inputs[\"dbengine\"] == \"Postgres\":\n            pg = dsmClient.getPg(inputs[\"id\"])\n            pgSpec = pg[\"spec\"]\n            outputs[\"infraPolicy\"] = pgSpec[\"infrastructurePolicy\"][\"name\"]\n            outputs.update(extractStatusInfo(pg))\n        if inputs[\"dbengine\"] == \"MySQL\":\n            mysql = dsmClient.getMysql(inputs[\"id\"])\n            mysqlSpec = mysql[\"spec\"]\n            outputs[\"infraPolicy\"] = mysqlSpec[\"infrastructurePolicy\"][\"name\"]\n            outputs.update(extractStatusInfoMysql(mysql))\n    elif op == \"delete\":\n        if inputs[\"dbengine\"] == \"Postgres\":\n            db = dsmClient.getPg(inputs[\"id\"])\n            dsmClient.deletePg(inputs[\"id\"])\n        if inputs[\"dbengine\"] == \"MySQL\":\n            db = dsmClient.getMysql(inputs[\"id\"])\n            dsmClient.deleteMysql(inputs[\"id\"])\n\n        # If the request body had an entry for 'databaseconfig', then perform the necessary cleanup.\n        if \"databaseConfig\" in db[\"spec\"]:\n            dbConfigName = db[\"spec\"][\"databaseConfig\"][\"name\"]\n            dsmClient.deleteDatabaseConfig(dbConfigName)\n        # XXX: Wait\n\n    return outputs\n\n\ndef handler(context, inputs):\n    \"\"\"\n        This function handles various actions based on the input parameters.\n\n        Args:\n            context: The context object.\n            inputs: The input parameters.\n\n        Returns:\n            The outputs based on the specified action.\n    \"\"\"\n\n    # Get DSM connection configuration for VRO\n    dsmConnConfig = getDsmParamsForVro()\n    action = inputs.get(\"action\")\n    outputs = []\n    dsmClient = DsmClient(dsmConnConfig[\"dsmHost\"],dsmConnConfig[\"dsmUserID\"],dsmConnConfig[\"dsmPassword\"],dsmConnConfig[\"dsmSkipCertificateCheck\"],dsmConnConfig[\"dsmRootCA\"])\n\n    if action == \"form-infrapolicy\":\n        outputs = [\"Prod\", \"Dev\"]\n        # Get list of infrastructure policies\n        infraPolicyDict = dsmClient.listInfraPoliciesDict()\n        outputs = list(infraPolicyDict.keys())\n    elif action == \"form-dbversion\":\n        # Get list of database versions based on the selected database engine\n        dbengine = inputs.get(\"dbengine\")\n        dbname = inputs.get(\"deploymentName\")\n        outputs = dsmClient.listDbVersions(dbengine, dbname)\n    elif action == \"form-topology\":\n        # Get list of cluster topologies based on the selected database engine and replica mode\n        dbengine = inputs.get(\"dbengine\")\n        outputs = dsmClient.listClusterTopologies(dbengine)\n    elif action == \"form-storagepolicy\":\n        # Get list of storage policies based on the selected infrastructure policy\n        infraPolicyDict = dsmClient.listInfraPoliciesDict()\n        infraPolicyName = inputs.get('infraPolicy')\n        infraPolicy = infraPolicyDict.get(infraPolicyName)\n        if infraPolicy is not None:\n            outputs = infraPolicy[\"spec\"][\"storagePolicies\"]\n    elif action == \"form-vmclass\":\n        # Get list of VM classes based on the selected infrastructure policy\n        infraPolicyDict = dsmClient.listInfraPoliciesDict()\n        infraPolicyName = inputs.get('infraPolicy')\n        infraPolicy = infraPolicyDict.get(infraPolicyName)\n        if infraPolicy is not None:\n            outputs = [c[\"name\"] for c in infraPolicy[\"spec\"][\"vmClasses\"]]\n    elif action == \"form-backuplocation\":\n        # Get list of backup locations\n        outputs = dsmClient.listBackupLocations()\n    elif action == \"form-directoryServiceCreationTime\":\n        try:\n            cr_raw = dsmClient.k8sClusterList(dsmClient.GROUP_INFRA, dsmClient.GROUP_INFRAVER, \"directoryservices\")\n            cr = dsmClient.k8sListDict(cr_raw)\n            outputs = [cr[dsmClient.DEFAULT_DIRECTORY_SERVICE_NAME][\"metadata\"][\"creationTimestamp\"]]\n        except Exception:\n            # same as the default in `dsm-aria-automation/db_crud_form.yaml`\n            # need to use an explicit default so its simpler to understand the\n            # flow using logs\n            outputs = [\"NO_TIME\"]\n    elif action == \"form-deploymentCreationTime\":\n        # get cluster to fetch its creation time\n        # signifies if a cluster already exists\n        dbengine = inputs.get(\"dbengine\")\n        dbname = inputs.get(\"deploymentName\")\n\n        cluster = None\n        try:\n            if dbengine == \"Postgres\":\n                cluster = dsmClient.getPg(dbname)\n            elif dbengine == \"MySQL\":\n                cluster = dsmClient.getMysql(dbname)\n        except Exception:\n            pass\n\n        # same as the default in `dsm-aria-automation/db_crud_form.yaml`\n        # need to use an explicit default so its simpler to understand the\n        # flow using logs\n        outputs = [\"NO_TIME\"]\n        if cluster != None:\n            outputs = [cluster[\"metadata\"][\"creationTimestamp\"]]\n\n    elif action == \"form-connectionstring\":\n        # Get the database connection string\n        outputs = dsmClient.getDBConnectionString(inputs)\n    return outputs\n",
    "entrypoint": "abxHandler",
    "inputs": {
      "secret:8a74809294779ca3019628abba75397e": "",
      "secret:8a74809294779ca3019628ac1393397f": "",
      "secret:8a74818f94779d77019628ad2a76270c": "",
      "secret:8a74818f94779d77019628ae076a270d": "",
      "secret:8a7482f295174f32019628ac6881771d": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 200,
    "showMemoryAlert": false,
    "timeoutSeconds": 900,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "",
    "configuration": {},
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d77019628a68d78270b",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d77019628a68d78270b?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca3019628a3ff20397d": {
    "name": "DSM-Day2-Operations",
    "createdMillis": 1744438558499,
    "updatedMillis": 1744438645262,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "def dsmDay2OperationsHandler(context, inputs):\n    # At present this handler function does nothing meaningful.\n    # In the future more relevant logic will be added to this handler function\n    # as and when the other DSM day2 operations are supported in Aria.\n    outputs = {\n        \"message\": \"DSM-Day2-Operations action execution successful\"\n    }\n    return outputs\n",
    "entrypoint": "dsmDay2OperationsHandler",
    "inputs": {
      "target": "World"
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 900,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "",
    "configuration": {},
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca3019628a3ff20397d",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca3019628a3ff20397d?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7480e9926c0b1f0192887bc55300e8": {
    "name": "Cloud.vSphere.Machine.changeDisplayName",
    "createdMillis": 1737280905571,
    "updatedMillis": 1742811083304,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    displayName = inputs['newDisplayName']\r\n\r\n    compute = aa.getUerp(inputs['id'])\r\n    compute['customProperties']['displayName'] = displayName\r\n    aa.putUerp(compute['documentSelfLink'], compute)\r\n    desc = aa.getUerp(compute['descriptionLink'])\r\n    desc['customProperties']['displayName'] = displayName\r\n    aa.putUerp(desc['documentSelfLink'], desc)\r\n\r\n    return {\r\n        'displayName': displayName\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7480e9926c0b1f0192887bc55300e8",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7480e9926c0b1f0192887bc55300e8?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74812a9298740f0193622cf1c828ff": {
    "name": "Cloud.vSphere.Machine.detachBlockDisk",
    "createdMillis": 1737280905626,
    "updatedMillis": 1742811083196,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : blockDiskId : ''\r\n# Default : busNumber : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    vmName = inputs['resourceName']\r\n    diskName = inputs['diskName']\r\n    disks = []\r\n    for disk in inputs['storage']['disks']:\r\n        if diskName in disk['diskFile']:\r\n            aa.runOrchAction(inputs['project'], 'com.ecs.event/detachBlockDisk', {\r\n                'vmName': vmName,\r\n                'diskName': diskName\r\n            })\r\n        else: disks.append(disk)\r\n    inputs['storage']['disks'] = disks\r\n    return {\r\n        'storage': inputs['storage']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "diskName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74812a9298740f0193622cf1c828ff",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74812a9298740f0193622cf1c828ff?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab60192769fc5ed00e5": {
    "name": "Custom.AIP.create",
    "createdMillis": 1737280882840,
    "updatedMillis": 1742811083114,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    address = inputs['address'] if 'address' in inputs and inputs['address'] else ''\r\n    vpcProfileLink = inputs['vpc']\r\n    vpcProfile = aa.getUerp(vpcProfileLink)\r\n    subnetLink = vpcProfile['isolationExternalSubnetLink']\r\n    subnet = aa.getUerp(subnetLink)\r\n    subnetRange = aa.getUerp(f\"/resources/subnet-ranges?expand&$filter=subnetLink eq '{subnetLink}'\")\r\n    subnetRange = subnetRange['documents'][subnetRange['documentLinks'][0]]\r\n    subnetRangeLink = subnetRange['documentSelfLink']\r\n    subnetRangeId = subnetRangeLink.split('/subnet-ranges/')[1]\r\n\r\n    requestLink = aa.post(f'/iaas/api/network-ip-ranges/{subnetRangeId}/ip-addresses/allocate?apiVersion={apiVersion}', {\r\n        'ipAddresses': [address]\r\n    } if address else {\r\n        'numberOfIps': 1\r\n    })['selfLink']\r\n\r\n    for _ in range(0, 10):\r\n        time.sleep(1)\r\n        request = aa.get(requestLink)\r\n        if request['status'] == 'FINISHED':\r\n            iaasLink = request['resources'][0]\r\n            iaasIp = aa.get(f'{iaasLink}?apiVersion={apiVersion}')\r\n            iaasIpId = iaasIp['id']\r\n            ipAddress = aa.getUerp(f\"/resources/ip-addresses?expand&$filter=id eq '{iaasIpId}'\")\r\n            ipAddress = ipAddress['documents'][ipAddress['documentLinks'][0]]\r\n            ipAddressLink = ipAddress['documentSelfLink']\r\n            address = ipAddress['ipAddress']\r\n            break\r\n    else: raise Exception('could not allocate ip address')\r\n\r\n    inputs['id'] = iaasIpId\r\n    inputs['address'] = address\r\n    inputs['ipAddress'] = ipAddressLink\r\n    inputs['subnet'] = subnetLink\r\n    inputs['subnetName'] = subnet['name']\r\n    inputs['subnetRange'] = subnetRangeLink\r\n    inputs['subnetRangeName'] = subnetRange['name']\r\n    inputs['compute'] = 'NONE'\r\n    inputs['interface'] = 'NONE'\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab60192769fc5ed00e5",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab60192769fc5ed00e5?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab6019276c8b2c900f2": {
    "name": "Custom.AIP.read",
    "createdMillis": 1737280882900,
    "updatedMillis": 1742811083068,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab6019276c8b2c900f2",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab6019276c8b2c900f2?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74801d929873a00192a965bb870212": {
    "name": "Custom.Peering.read",
    "createdMillis": 1737280890712,
    "updatedMillis": 1742811083013,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74801d929873a00192a965bb870212",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74801d929873a00192a965bb870212?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74821b939d61690193be5998813188": {
    "name": "Custom.Project.changeAdministrators",
    "createdMillis": 1737280899726,
    "updatedMillis": 1742811082952,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    \r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['administrators'])\r\n    removes = [{'email': username, 'role': 'administrator', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n\r\n    return {\r\n        'administrators': newUsers\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74821b939d61690193be5998813188",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74821b939d61690193be5998813188?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926cf3bf2a0027": {
    "name": "Custom.Project.changeDisplayName",
    "createdMillis": 1737280899747,
    "updatedMillis": 1742811082895,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['id']\r\n    projectUrl = f'/iaas/api/projects/{projectId}'\r\n    displayName = inputs['newDisplayName']\r\n    project = aa.get(projectUrl)\r\n    project['description'] = displayName\r\n    aa.patch(projectUrl, project)\r\n\r\n    inputs['displayName'] = displayName\r\n    outputs = inputs\r\n    outputs.pop('newDisplayName')\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926cf3bf2a0027",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926cf3bf2a0027?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74829a93bf04610193c94fdcc1003c": {
    "name": "Custom.Project.changeMembers",
    "createdMillis": 1737280899689,
    "updatedMillis": 1742811082837,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['members'])\r\n    \r\n    removes = [{'email': username, 'role': 'member', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in inputs['administrators']: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n\r\n    return {\r\n        'members': newUsers\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74829a93bf04610193c94fdcc1003c",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74829a93bf04610193c94fdcc1003c?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809d93bf04680193c95d9b7910e5": {
    "name": "Custom.Project.changeSharedResources",
    "createdMillis": 1737280899652,
    "updatedMillis": 1742811082779,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    sharedResources = True if inputs['newSharedResources'] == 'true' else False\r\n\r\n    project = aa.patch(f'/iaas/api/projects/{projectId}', {\r\n        'sharedResources': sharedResources\r\n    })\r\n    \r\n    return {\r\n        'sharedResources': sharedResources\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newSharedResources": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809d93bf04680193c95d9b7910e5",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809d93bf04680193c95d9b7910e5?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74819a93bf04810193c9527fd0004c": {
    "name": "Custom.Project.changeSupervisors",
    "createdMillis": 1737280899786,
    "updatedMillis": 1742811082722,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    \r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['supervisors'])\r\n    removes = [{'email': username, 'role': 'supervisor', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in inputs['administrators']: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    print(modifies)\r\n    print(removes)\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n    \r\n    approvalPolicyId = inputs['approvalPolicy']\r\n    if inputs['approver'] and newUsers and inputs['approvalActions']:\r\n        if not approvalPolicyId:\r\n            approver = inputs['approver']\r\n            approvalPolicyId = aa.post('/policy/api/policies', {\r\n                'name': inputs['name'] + '-approval',\r\n                'projectId': projectId,\r\n                'enforcementType': 'HARD',\r\n                'typeId': 'com.vmware.policy.approval',\r\n                'definition': {\r\n                    'level': 1,\r\n                    'approverType': 'USER',\r\n                    'approvalMode': 'ANY_OF',\r\n                    'approvers': [f'USER:{approver}'],\r\n                    'autoApprovalDecision': inputs['autoApprovalDecision'] if 'autoApprovalDecision' in inputs and inputs['autoApprovalDecision'] else 'REJECT',\r\n                    'autoApprovalExpiry': inputs['autoApprovalExpiry'] if 'autoApprovalExpiry' in inputs and inputs['autoApprovalExpiry'] else 1,\r\n                    'actions': inputs['approvalActions']\r\n                }\r\n            })['id']\r\n    else:\r\n        if approvalPolicyId:\r\n            aa.delete(f'/policy/api/policies/{approvalPolicyId}')\r\n            approvalPolicyId = ''\r\n\r\n    return {\r\n        'supervisors': newUsers,\r\n        'approvalPolicy': approvalPolicyId\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74819a93bf04810193c9527fd0004c",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74819a93bf04810193c9527fd0004c?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809d93bf04680193c9506f4310dc": {
    "name": "Custom.Project.changeViewers",
    "createdMillis": 1737280899628,
    "updatedMillis": 1742811082669,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    \r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['viewers'])\r\n    removes = [{'email': username, 'role': 'viewer', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in inputs['administrators']: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n\r\n    return {\r\n        'viewers': newUsers\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809d93bf04680193c9506f4310dc",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809d93bf04680193c9506f4310dc?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7cd7660011": {
    "name": "Custom.Project.create",
    "createdMillis": 1737280899769,
    "updatedMillis": 1742811082616,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    if 'administrators' not in inputs: inputs['administrators'] = []\r\n    if 'members' not in inputs: inputs['members'] = []\r\n    if 'viewers' not in inputs: inputs['viewers'] = []\r\n    if 'supervisors' not in inputs: inputs['supervisors'] = []\r\n    if 'sharedResources' not in inputs: inputs['sharedResources'] = False\r\n    if 'cloudZones' not in inputs: inputs['cloudZones'] = []\r\n    if 'placementPolicy' not in inputs: inputs['placementPolicy'] = 'default'\r\n    if 'catalogs' not in inputs: inputs['catalogs'] = []\r\n\r\n    project = aa.post('/iaas/api/projects', {\r\n        'name': inputs['name'],\r\n        'description': inputs['displayName'],\r\n        'sharedResources': inputs['sharedResources'],\r\n        'zoneAssignmentConfigurations': [{'zoneId': cloudZone} for cloudZone in inputs['cloudZones']],\r\n        'placementPolicy': inputs['placementPolicy'].upper()\r\n    })\r\n    projectId = project['id']\r\n    \r\n    principals = []\r\n    for username in inputs['administrators']: principals.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: principals.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: principals.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: principals.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': principals\r\n    })\r\n\r\n    if inputs['catalogs']:\r\n        inputs['catalogPolicy'] = aa.post('/policy/api/policies', {\r\n            'name': inputs['name'] + '-catalog',\r\n            'projectId': projectId,\r\n            'enforcementType': 'HARD',\r\n            'typeId': 'com.vmware.policy.catalog.entitlement',\r\n            'definition': {\r\n                'entitledUsers': [{\r\n                    'userType': 'USER',\r\n                    'principals': [{\r\n                        'type': 'PROJECT',\r\n                        'referenceId': ''\r\n                    }],\r\n                    'items': [{\r\n                        'id': catalogId,\r\n                        'type': 'CATALOG_ITEM_IDENTIFIER'\r\n                    } for catalogId in inputs['catalogs']]\r\n                }]\r\n            }\r\n        })['id']\r\n    else: inputs['catalogPolicy'] = ''\r\n    \r\n    if inputs['approver'] and inputs['supervisors'] and inputs['approvalActions']:\r\n        approver = inputs['approver']\r\n        inputs['approvalPolicy'] = aa.post('/policy/api/policies', {\r\n            'name': inputs['name'] + '-approval',\r\n            'projectId': projectId,\r\n            'enforcementType': 'HARD',\r\n            'typeId': 'com.vmware.policy.approval',\r\n            'definition': {\r\n                'level': 1,\r\n                'approverType': 'USER',\r\n                'approvalMode': 'ANY_OF',\r\n                'approvers': [f'USER:{approver}'],\r\n                'autoApprovalDecision': inputs['autoApprovalDecision'] if 'autoApprovalDecision' in inputs and inputs['autoApprovalDecision'] else 'REJECT',\r\n                'autoApprovalExpiry': inputs['autoApprovalExpiry'] if 'autoApprovalExpiry' in inputs and inputs['autoApprovalExpiry'] else 1,\r\n                'actions': inputs['approvalActions']\r\n            }\r\n        })['id']\r\n    else: inputs['approvalPolicy'] = ''\r\n\r\n    if not aa.getUerp(f\"/resources/tags?expand&$filter=((key eq 'projectId') and (value eq '{projectId}'))\")['documentLinks']:\r\n        aa.postUerp('/resources/tags?expand', {\r\n            'key': 'projectId',\r\n            'value': projectId,\r\n            'isSaved': True,\r\n            'origins': ['USER_DEFINED']\r\n        })\r\n\r\n    inputs['id'] = projectId\r\n    inputs['selfId'] = projectId\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7cd7660011",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7cd7660011?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7f53a40015": {
    "name": "Custom.VPC.read",
    "createdMillis": 1737280912460,
    "updatedMillis": 1742811082567,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7f53a40015",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7f53a40015?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7d1dcf0012": {
    "name": "Custom.Project.read",
    "createdMillis": 1737280899708,
    "updatedMillis": 1742811082490,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7d1dcf0012",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7d1dcf0012?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7d6a960013": {
    "name": "Custom.Project.delete",
    "createdMillis": 1737280899670,
    "updatedMillis": 1742811082438,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['id']\r\n    if aa.get(f'/deployment/api/deployments?projects={projectId}')['content']: raise Exception('project has deployment')\r\n    project = aa.get(f'/iaas/api/projects/{projectId}')\r\n    project['zoneAssignmentConfigurations'] = []\r\n    aa.patch(f'/iaas/api/projects/{projectId}', project)\r\n    aa.delete(f'/iaas/api/projects/{projectId}')\r\n    catalogPolicyId = inputs['catalogPolicy']\r\n    if catalogPolicyId:\r\n        try: aa.delete(f'/policy/api/policies/{catalogPolicyId}')\r\n        except: pass\r\n    approvalPolicyId = inputs['approvalPolicy']\r\n    if approvalPolicyId:\r\n        try: aa.delete(f'/policy/api/policies/{approvalPolicyId}')\r\n        except: pass\r\n    for projectIdTagLink in aa.getUerp(f\"/resources/tags?$filter=((key eq 'projectId') and (value eq '{projectId}'))\")['documentLinks']:\r\n        try: aa.deleteUerp(f'{projectIdTagLink}?ignoreUsage=true')\r\n        except: pass\r\n\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7d6a960013",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7d6a960013?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca30194f3f244e75b3d": {
    "name": "Cloud.NSX.LoadBalancer.changeServerPool",
    "createdMillis": 1739259528425,
    "updatedMillis": 1742811082375,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : machineIds : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    targetLinks = inputs['targetLinks'].split(',') if inputs['targetLinks'] else []\r\n    print(targetLinks)\r\n    lbId = inputs['resourceId']\r\n    taskUrl = aa.post(f'/iaas/api/load-balancers/{lbId}/operations/scale', {\r\n        'targetLinks': targetLinks\r\n    })['selfLink']\r\n    \r\n    while True:\r\n        time.sleep(1)\r\n        task = aa.get(taskUrl)\r\n        status = task['status']\r\n        if status == 'FINISHED': break;\r\n        elif status == 'FAILED': raise Exception(task['message'])\r\n    \r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "targetLinks": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca30194f3f244e75b3d",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca30194f3f244e75b3d?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74829294779cae0194fe99520d014a": {
    "name": "Cloud.SecurityGroup.changeDisplayName",
    "createdMillis": 1739438248465,
    "updatedMillis": 1742811082307,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    return {'displayName': inputs['newDisplayName']}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74829294779cae0194fe99520d014a",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74829294779cae0194fe99520d014a?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926cfa34490030": {
    "name": "Custom.VPC.changeDisplayName",
    "createdMillis": 1737280912505,
    "updatedMillis": 1742811082255,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    displayName = inputs['newDisplayName']\r\n    vpcProfileLink = inputs['vpcProfile']\r\n    vpcProfile = aa.getUerp(vpcProfileLink)\r\n    vpcProfile['desc'] = displayName\r\n    aa.putUerp(vpcProfileLink, vpcProfile)\r\n    return {\r\n        'displayName': displayName\r\n    }\r\n    \r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926cfa34490030",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926cfa34490030?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601927fc2096401b0": {
    "name": "Cloud.NSX.Network.changeDisplayName",
    "createdMillis": 1737280905551,
    "updatedMillis": 1742811082178,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # aa = AaManager(context)\r\n    # displayName = inputs['newDisplayName']\r\n    # networkLink = inputs['id']\r\n    # network = aa.getUerp(networkLink)\r\n    # network['customProperties']['displayName'] = displayName\r\n    # network = aa.putUerp(networkLink, network)\r\n    # subnetLink = network['subnetLink']\r\n    # subnet = aa.getUerp(subnetLink)\r\n    # subnet['customProperties']['displayName'] = displayName\r\n    # subnet = aa.putUerp(subnetLink, subnet)\r\n    # return {\r\n    #     'displayName': displayName\r\n    # }\r\n    return {\r\n        'displayName': inputs['newDisplayName']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601927fc2096401b0",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601927fc2096401b0?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7480e9926c0b1f01928fbe16be0105": {
    "name": "Cloud.vSphere.Machine.changeIpAddress",
    "createdMillis": 1737280905607,
    "updatedMillis": 1742811082092,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : interfaceLink : ''\r\n# Default : newIpAddress : ''\r\n# Default : releaseMode : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    computeLink = inputs['id']\r\n    interfaceLink = inputs['interfaceLink']\r\n    newIpAddress = inputs['newIpAddress']\r\n    releaseMode = inputs['releaseMode'].upper()\r\n    adminUsername = inputs['adminUsername']\r\n    adminPassword = context.getSecret(inputs['adminPassword'])\r\n    interface = aa.getUerp(interfaceLink)\r\n\r\n    aa.runOrchAction(inputs['project'], 'com.bvp.bp.vm/changeIpAddress', {\r\n        'computeLink': computeLink,\r\n        'interfaceLink': interfaceLink,\r\n        'newIpAddress': newIpAddress,\r\n        'releaseMode': releaseMode,\r\n        'adminUsername': adminUsername,\r\n        'adminPassword': adminPassword\r\n    })\r\n    if interface['customProperties']['primaryAddress'] == 'true' or interface['id'] == inputs['primaryMAC']: inputs['address'] = newIpAddress\r\n    for network in inputs['networks']:\r\n        if network['id'] == interfaceLink:\r\n            network['address'] = newIpAddress\r\n            break\r\n\r\n    return {\r\n        'address': inputs['address'],\r\n        'networks': inputs['networks']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "releaseMode": "",
      "newIpAddress": "",
      "interfaceLink": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7480e9926c0b1f01928fbe16be0105",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7480e9926c0b1f01928fbe16be0105?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab6019276c943f300f3": {
    "name": "Custom.AIP.delete",
    "createdMillis": 1737280882941,
    "updatedMillis": 1742811082033,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    subnetRangeLink = inputs['subnetRange']\r\n    subnetRangeId = subnetRangeLink.split('/subnet-ranges/')[1]\r\n\r\n    if inputs['compute'] != 'NONE':\r\n        projectId = inputs['__metadata']['project']\r\n        accessIpId = inputs['id']\r\n        interfaceLink = inputs['interface']\r\n        aa.runOrchAction(projectId, 'com.bvp.bp.aip/detachAccessIp', {\r\n            'interfaceLink': interfaceLink,\r\n            'accessIpId': accessIpId\r\n        })\r\n    requestLink = aa.post(f'/iaas/api/network-ip-ranges/{subnetRangeId}/ip-addresses/release?apiVersion={apiVersion}', {\r\n        'ipAddresses': [inputs['address']]\r\n    })['selfLink']\r\n    for _ in range(0, 10):\r\n        time.sleep(1)\r\n        request = aa.get(requestLink)\r\n        if request['status'] == 'FINISHED': break\r\n    else: raise Exception('could not release ip address')\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab6019276c943f300f3",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab6019276c943f300f3?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601928a9719ae01ef": {
    "name": "Custom.AIP.detach",
    "createdMillis": 1737280882923,
    "updatedMillis": 1742811081978,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}): return self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})['data']\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    if inputs['compute'] == 'NONE': raise Exception('Access IP is not attached')\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    accessIpId = inputs['id']\r\n    interfaceLink = inputs['interface']\r\n\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.aip/detachAccessIp', {\r\n        'interfaceLink': interfaceLink,\r\n        'accessIpId': accessIpId\r\n    })\r\n\r\n    inputs['compute'] = 'NONE'\r\n    inputs['computeName'] = ''\r\n    inputs['interface'] = 'NONE'\r\n    inputs['interfaceAddress'] = ''\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601928a9719ae01ef",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601928a9719ae01ef?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601928a6f461901ea": {
    "name": "Custom.AIP.attach",
    "createdMillis": 1737280882879,
    "updatedMillis": 1742811081917,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : computeLink :\r\n# Default : interfaceLink :\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    if inputs['compute'] != 'NONE': raise Exception('Access IP already has allocated another machine')\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    accessIpId = inputs['id']\r\n    computeLink = inputs['computeLink']\r\n    compute = aa.getUerp(computeLink);\r\n    interfaceLink = inputs['interfaceLink']\r\n    for aip in aa.get(f'/deployment/api/resources?resourceTypes=Custom.AIP&projects={projectId}')['content']:\r\n        if aip['properties']['id'] == accessIpId:\r\n            resourceId = aip['id']\r\n            break\r\n    else: raise Exception('could not find current resource id')\r\n    interfaceAddress = aa.runOrchAction(projectId, 'com.bvp.bp.aip/attachAccessIp', {\r\n        'interfaceLink': interfaceLink,\r\n        'accessIpId': accessIpId,\r\n        'resourceId': resourceId\r\n    })\r\n\r\n    inputs['compute'] = computeLink\r\n    inputs['computeName'] = compute['name']\r\n    inputs['interface'] = interfaceLink\r\n    inputs['interfaceAddress'] = interfaceAddress\r\n    outputs = inputs\r\n    outputs.pop(\"computeLink\")\r\n    outputs.pop('interfaceLink')\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "computeLink": "",
      "interfaceLink": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601928a6f461901ea",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601928a6f461901ea?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74801d929873a00192a96576b00211": {
    "name": "Custom.Peering.create",
    "createdMillis": 1737280890687,
    "updatedMillis": 1742811081853,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\nimport uuid\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    peeringId = str(uuid.uuid4())\r\n    projectId = inputs['__metadata']['project']\r\n    subnetLink1 = inputs['subnet1']\r\n    subnetLink2 = inputs['subnet2']\r\n\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.peer/peeringProvision', {\r\n        'peeringId': peeringId,\r\n        'subnetLink1': subnetLink1,\r\n        'subnetLink2': subnetLink2\r\n    })\r\n\r\n    inputs['id'] = peeringId\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74801d929873a00192a96576b00211",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74801d929873a00192a96576b00211?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74801d929873a00192a96643fe0213": {
    "name": "Custom.Peering.delete",
    "createdMillis": 1737280890652,
    "updatedMillis": 1742811081792,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    peeringId = inputs['id']\r\n    projectId = inputs['__metadata']['project']\r\n    subnetLink1 = inputs['subnet1']\r\n    subnetLink2 = inputs['subnet2']\r\n\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.peer/peeringRemoval', {\r\n        'peeringId': peeringId,\r\n        'subnetLink1': subnetLink1,\r\n        'subnetLink2': subnetLink2\r\n    })\r\n\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74801d929873a00192a96643fe0213",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74801d929873a00192a96643fe0213?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7f198b0014": {
    "name": "Custom.VPC.create",
    "createdMillis": 1737280912490,
    "updatedMillis": 1742811081740,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    name = inputs['name']\r\n    displayName = inputs['displayName']\r\n    projectId = inputs['__metadata']['project']\r\n    project = aa.get(f'/iaas/api/projects/{projectId}')\r\n    projectName = project['name']\r\n\r\n    vpcTagCategory = inputs['vpcTagCategory']\r\n    vpcInfraProfileLink = inputs['vpcInfraProfile']\r\n    vpcInfraProfile = aa.getUerp(vpcInfraProfileLink)\r\n    vpcInfraProfileName = vpcInfraProfile['desc']\r\n    transitSubnetLink = vpcInfraProfile['subnetLinks'][0]\r\n    transitSubnet = aa.getUerp(transitSubnetLink)\r\n    transitSegmentPath = transitSubnet['customProperties']['__path']\r\n    transitPrefix = transitSubnet['subnetCIDR'].split('/')[1]\r\n    managedGatewayLink = inputs['managedGateway']\r\n    managedGateway = aa.getUerp(managedGatewayLink)\r\n    managedRouterLink = managedGateway['routerStateLink']\r\n    managedRouter = aa.getUerp(managedRouterLink)\r\n    routerName = managedRouter['name']\r\n    endpointLink = managedRouter['endpointLink']\r\n    managedTier1Path = aa.getUerp(managedRouterLink)['customProperties']['__path']\r\n    managedNetworkLink = inputs['managedNetwork']\r\n    managedNetwork = aa.getUerp(managedNetworkLink)\r\n    managedSubnetLink = managedNetwork['subnetLink']\r\n    managedSubnet = aa.getUerp(managedSubnetLink)\r\n    managedSegmentPath = managedSubnet['customProperties']['__path']\r\n    managedLoadBalancerLink = inputs['managedLoadBalancer']\r\n    managedLoadBalancer = aa.getUerp(managedLoadBalancerLink)\r\n\r\n    for transitRangeLink, transitRange in aa.getUerp(f\"/resources/subnet-ranges?expand&$filter=subnetLinks.item eq '{transitSubnetLink}'\")['documents'].items():\r\n        transitRangeId = transitRangeLink.split(\"/subnet-ranges/\")[1]\r\n        ipTaskLink = aa.post(f'/iaas/api/network-ip-ranges/{transitRangeId}/ip-addresses/allocate?apiVersion={apiVersion}', {\"numberOfIps\": 1})['selfLink'];\r\n        for _ in range(0, 10):\r\n            time.sleep(1)\r\n            ipTask = aa.get(ipTaskLink)\r\n            if ipTask['status'] == 'FINISHED':\r\n                ipId = ipTask['resources'][0].split(\"/ip-addresses/\")[1]\r\n                transitIpAddressLink = aa.getUerp(f\"/resources/ip-addresses?$filter=id eq '{ipId}'\")['documentLinks'][0]\r\n                transitIpAddress = aa.getUerp(transitIpAddressLink)\r\n                transitAddress = transitIpAddress['ipAddress']\r\n                aa.runOrchAction(projectId, 'com.bvp.bp.vpc/vpcProvision', {\r\n                    'endpointLink': endpointLink,\r\n                    'managedRouterLink': managedRouterLink,\r\n                    'managedTier1Path': managedTier1Path,\r\n                    'transitSegmentPath': transitSegmentPath,\r\n                    'transitAddressLink': transitIpAddressLink,\r\n                    'transitPrefix': transitPrefix\r\n                })\r\n                break\r\n        else: raise Exception('could not allocate transit address')\r\n        break\r\n    else: raise Exception('could not find transit address range')\r\n\r\n    domain = managedSubnet['domain']\r\n    projectDomain = f'{projectName}.{domain}'\r\n\r\n    managedSubnet['domain'] = projectDomain\r\n    managedSubnet['dnsSearchDomains'] = [projectDomain]\r\n    managedSubnet = aa.putUerp(managedSubnetLink, managedSubnet)\r\n    managedNetwork['customProperties']['domain'] = projectDomain\r\n    managedNetwork['customProperties']['dnsSearchDomains'] = f'[{projectDomain}]'\r\n    managedNetwork = aa.putUerp(managedNetworkLink, managedNetwork)\r\n    managedIpAddress = aa.getUerp(f\"/resources/ip-addresses?expand&$filter=connectedResourceLink eq '{managedSubnetLink}'\")\r\n    managedIpAddressLink = managedIpAddress['documentLinks'][0]\r\n    managedIpAddress = managedIpAddress['documents'][managedIpAddressLink]\r\n    managedAddress = managedIpAddress['ipAddress']\r\n\r\n    vpcProfile = {\r\n        'name': name,\r\n        'desc': displayName,\r\n        'provisioningRegionLink': vpcInfraProfile['provisioningRegionLink'],\r\n        'isolationType': 'SUBNET',\r\n        'isolationNetworkLink': vpcInfraProfile['isolationNetworkLink'],\r\n        'isolationExternalSubnetLink': vpcInfraProfile['isolationExternalSubnetLink'],\r\n        'isolationNetworkCIDR': vpcInfraProfile['isolationNetworkCIDR'],\r\n        'isolatedSubnetCIDRPrefix': vpcInfraProfile['isolatedSubnetCIDRPrefix'],\r\n        'customProperties': {\r\n            'onDemandNetworkIPAssignmentType': 'static',\r\n            'edgeClusterRouterStateLink': vpcInfraProfile['customProperties']['edgeClusterRouterStateLink'],\r\n            'tier0LogicalRouterStateLink': vpcInfraProfile['customProperties']['tier0LogicalRouterStateLink'],\r\n            'vpcProjectId': projectId,\r\n            'vpcProjectName': projectName,\r\n            'vpcProjectDomain': projectDomain,\r\n            'vpcRouterName': routerName,\r\n            'vpcManagedGatewayLink': managedGatewayLink,\r\n            'vpcManagedRouterLink': managedRouterLink,\r\n            'vpcManagedTier1Path': managedTier1Path,\r\n            'vpcManagedNetworkLink': managedNetworkLink,\r\n            'vpcManagedSubnetLink': managedSubnetLink,\r\n            'vpcManagedSegmentPath': managedSegmentPath,\r\n            'vpcManagedIpAddressLink': managedIpAddressLink,\r\n            'vpcManagedAddress': managedAddress,\r\n            'vpcManagedLoadBalancerLink': managedLoadBalancerLink,\r\n            'vpcInfraProfileLink': vpcInfraProfileLink,\r\n            'vpcTransitSubnetLink': transitSubnetLink,\r\n            'vpcTransitSegmentPath': transitSegmentPath,\r\n            'vpcTransitIpAddressLink': transitIpAddressLink,\r\n            'vpcTransitAddress': transitAddress,\r\n            'vpcDnsServerAddresses': json.dumps(managedSubnet['dnsServerAddresses']),\r\n        },\r\n        'subnets': [managedSubnet],\r\n        'subnetLinks': [managedSubnetLink],\r\n        'loadBalancers': [managedLoadBalancer],\r\n        'loadBalancerLinks': [managedLoadBalancerLink],\r\n        'securityGroups': [],\r\n        'securityGroupLinks': []\r\n    }\r\n\r\n    vpcProfile = aa.postUerp('/provisioning/resources/network-profiles', vpcProfile)\r\n    vpcProfileLink = vpcProfile['documentSelfLink']\r\n    vpcId = vpcProfileLink.split('/network-profiles/')[1]\r\n\r\n    vpcIdTag = aa.getUerp(f\"/resources/tags?expand&$filter=((key eq 'vpcId') and (value eq '{vpcId}'))\")\r\n    if vpcIdTag['documentLinks']: vpcIdTag = vpcIdTag['documents'][vpcIdTag['documentLinks'][0]]\r\n    else:\r\n        vpcIdTag = aa.postUerp('/resources/tags?expand', {\r\n            'key': vpcTagCategory,\r\n            'value': vpcId,\r\n            'isSaved': True,\r\n            'origins': ['USER_DEFINED']\r\n        })\r\n\r\n    vpcProfile['tags'] = [vpcIdTag]\r\n    vpcProfile['tagLinks'] = [vpcIdTag['documentSelfLink']]\r\n    vpcProfile = aa.putUerp(vpcProfileLink, vpcProfile)\r\n\r\n    inputs['id'] = vpcId\r\n    inputs['projectName'] = projectName\r\n    inputs['infraName'] = vpcInfraProfileName\r\n    inputs['routerName'] = routerName\r\n    inputs['projectDomain'] = projectDomain\r\n    inputs['vpcProfile'] = vpcProfileLink\r\n    inputs['managedRouter'] = managedRouterLink\r\n    inputs['managedTier1'] = managedTier1Path\r\n    inputs['managedSubnet'] = managedSubnetLink\r\n    inputs['managedSegment'] = managedSegmentPath\r\n    inputs['managedIpAddress'] = managedIpAddressLink\r\n    inputs['managedAddress'] = managedAddress\r\n    inputs['transitSubnet'] = transitSubnetLink\r\n    inputs['transitSegment'] = transitSegmentPath\r\n    inputs['transitIpAddress'] = transitIpAddressLink\r\n    inputs['transitAddress'] = transitAddress\r\n    \r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7f198b0014",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7f198b0014?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7f90410016": {
    "name": "Custom.VPC.delete",
    "createdMillis": 1737280912476,
    "updatedMillis": 1742811081679,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    vpcId = inputs['id']\r\n    vpcProfileLink = inputs['vpcProfile']\r\n    if aa.getUerp(f\"/provisioning/resources/compute-networks?$filter=((networkType eq 'PRIVATE') and (customProperties.vpc eq '{vpcProfileLink}'))\")['documentLinks']:\r\n        raise Exception('vpc has segment')\r\n    for aip in aa.get(f\"/deployment/api/resources?resourceTypes=Custom.AIP&projects={projectId}\")['content']:\r\n        if aip['properties']['vpc'] == vpcProfileLink: raise Exception('vpc has access ip')\r\n    managedRouterLink = inputs['managedRouter']\r\n    managedRouter = aa.getUerp(managedRouterLink)\r\n    endpointLink = managedRouter['endpointLink']\r\n    managedTier1Path = inputs['managedTier1']\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.vpc/vpcRemoval', {\r\n        'endpointLink': endpointLink,\r\n        'managedRouterLink': managedRouterLink,\r\n        'managedTier1Path': managedTier1Path\r\n    })\r\n    transitIpAddress = aa.getUerp(inputs['transitIpAddress'])\r\n    transitRangeId = transitIpAddress['subnetRangeLink'].split('/subnet-ranges/')[1]\r\n    requestLink = aa.post(f'/iaas/api/network-ip-ranges/{transitRangeId}/ip-addresses/release?apiVersion={apiVersion}', {\r\n        'ipAddresses': [transitIpAddress['ipAddress']]\r\n    })['selfLink']\r\n    for _ in range(0, 10):\r\n        time.sleep(1)\r\n        request = aa.get(requestLink)\r\n        if request['status'] == 'FINISHED': break\r\n    else: raise Exception('could not release tansit address')\r\n\r\n    aa.deleteUerp(vpcProfileLink)\r\n\r\n    vpcIdTag = aa.getUerp(f\"/resources/tags?expand&$filter=((key eq 'vpcId') and (value eq '{vpcId}'))\")\r\n    if vpcIdTag['documentLinks']:\r\n        vpcIdTagLink = vpcIdTag['documentLinks'][0]\r\n        aa.deleteUerp(f'{vpcIdTagLink}?ignoreUsage=true')\r\n\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7f90410016",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7f90410016?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7482f295174f3201951d2fe5020cd5": {
    "name": "Custom.NFS.read",
    "createdMillis": 1739951432973,
    "updatedMillis": 1742811081624,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7482f295174f3201951d2fe5020cd5",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7482f295174f3201951d2fe5020cd5?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74818f94779d7701951d3060c34228": {
    "name": "Custom.NFS.delete",
    "createdMillis": 1739951464650,
    "updatedMillis": 1742811081558,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d7701951d3060c34228",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d7701951d3060c34228?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca301951d2f8f200296": {
    "name": "Custom.NFS.create",
    "createdMillis": 1739951410979,
    "updatedMillis": 1742811081489,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    compute = aa.getUerp(inputs['compute'])\r\n    inputs['name'] = compute['name']\r\n    inputs['address'] = compute['address']\r\n    return inputs",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca301951d2f8f200296",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca301951d2f8f200296?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74818f94779d770194fd01f3004143": {
    "name": "Cloud.vSphere.Machine.changeSecurityGroup",
    "createdMillis": 1739411550987,
    "updatedMillis": 1742811081431,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newSecurityGroupCodeName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    computeId = inputs['id']\r\n    dfwTag = inputs['_dfw_tag_category']\r\n    securityGroupCodeName = inputs['newSecurityGroupCodeName']\r\n    \r\n    resourceId = computeId.split(\"/resources/compute/\")[1]\r\n    tagObjects = []\r\n    if securityGroupCodeName and securityGroupCodeName != '-':\r\n        tagObject = {\r\n            \"key\": dfwTag,\r\n            \"value\": securityGroupCodeName\r\n        }\r\n        tagObjects = [ tagObject ]\r\n\r\n        #\"tags\":[{\"key\":\"dfwId\",\"value\":\"jpq0byah-i1qe1wd6\"}]\r\n    newMachineDocument = aa.post(\"/deployment/api/resources/\" + resourceId + \"/requests\", {\r\n        \"actionId\": \"Cloud.vSphere.Machine.Update.Tags\",\r\n        \"inputs\": { \r\n            \"tags\": tagObjects \r\n        }\r\n    });\r\n    \r\n    print (newMachineDocument)\r\n    \r\n    return {\r\n        'securityGroupCodeName': securityGroupCodeName\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "_dfw_tag_category": "dfwId",
      "newSecurityGroupCodeName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d770194fd01f3004143",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d770194fd01f3004143?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74812a9298740f019361dd54f128f6": {
    "name": "Cloud.vSphere.Machine.attachBlockDisk",
    "createdMillis": 1737280905589,
    "updatedMillis": 1742811081352,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : blockDiskId : ''\r\n# Default : busNumber : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    vmName = inputs['resourceName']\r\n    blockDiskId = inputs['blockDiskId']\r\n    resourceLink = f'/resources/disks/{blockDiskId}'\r\n    disk = aa.get(f'/deployment/api/resources/{blockDiskId}')\r\n    properties = disk['properties']\r\n    diskFile = properties['diskFile']\r\n    diskSizeGb = properties['capacityGb']\r\n    busNumber = int(inputs['busNumber'])\r\n    aa.runOrchAction(inputs['project'], 'com.bvp.bp.vm/attachBlockDisk', {\r\n        'vmName': vmName,\r\n        'diskFile': diskFile,\r\n        'diskSizeGb': diskSizeGb,\r\n        'busNumber': busNumber\r\n    })\r\n    inputs['storage']['disks'].append({\r\n        'name': properties['displayName'],\r\n        'type': 'HDD',\r\n        'diskFile': diskFile,\r\n        'encrypted': False,\r\n        'independent': \"true\",\r\n        'capacityGb': diskSizeGb,\r\n        'resourceLink': resourceLink,\r\n        'provisioningType': properties['provisioningType']\r\n    })\r\n    return {\r\n        'storage': inputs['storage']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "busNumber": "",
      "blockDiskId": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74812a9298740f019361dd54f128f6",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74812a9298740f019361dd54f128f6?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74818f94779d77019535f094db428c": {
    "name": "Custom.Kubernetes.create",
    "createdMillis": 1740366714078,
    "updatedMillis": 1742811081287,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\n'''\n@copyright: Equal Plus\n@author: Hye-Churn Jang\n'''\n\n#===============================================================================\n# Import Libraries Here\n#===============================================================================\nimport json\nimport time\nimport uuid\n\n\n#===============================================================================\n# AaManager SDK\n#===============================================================================\nclass AaManager:\n    def __init__(self, context): self.context = context\n    def toJson(self, response):\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\n        try: return json.loads(response['content'].decode('utf-8'))\n        except: return response['content'].decode('utf-8')\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\n    def runOrchAction(self, projectId, uri, data={}):\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\n        if 'data' in result: return result['data']\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\n        else: raise Exception('unknown error')\n\n\n#===============================================================================\n# Implement Handler Here\n#===============================================================================\nimport re\nimport uuid\nimport time\n\n# Implement Handler Here\ndef handler(context, inputs):\n    # set common values\n    aa = AaManager(context)\n    \n    # set default values\n    if 'name' not in inputs or not inputs['name']: raise Exception('name property must be required') # Required\n    name = inputs['name']\n    if 'clusterType' not in inputs or not inputs['clusterType'] or inputs['clusterType'] not in ['tanzu', 'external']: raise Exception('clusterType property must be required') # Required\n    if inputs['clusterType'] == 'tanzu':\n        if 'cluster' not in inputs or not inputs['cluster']: raise Exception('cluster property must be required') # Required\n        cluster = inputs['cluster']\n        headers = {\n            'Authorization': vra.headers['Authorization'],\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Accept-Language': 'ko,en-US;q=0.9,en;q=0.8,ko-KR;q=0.7'\n        }\n        kubeConfig = requests.get('https://{}{}/kube-config'.format(vra.hostname, cluster), headers=headers)\n        kubeConfig.raise_for_status()\n        kubeConfig = kubeConfig.text\n        projectId = aa.get(cluster)['projectId']\n        projectName = aa.get('/iaas/api/projects/{}'.format(projectId))['name']\n    elif inputs['clusterType'] == 'external':\n        if 'kubeConfig' not in inputs or not inputs['kubeConfig']: raise Exception('kubeConfig property must be required') # Required\n        if 'project' not in inputs or not inputs['project']: raise Exception('project property must be required') # Required\n        kubeConfig = inputs['kubeConfig']\n        projectName = inputs['project']\n        try: projectId = aa.get(\"/iaas/api/projects?$filter=(name eq '{}')\".format(projectName))['content'][0]['id']\n        except Exception as e: raise Exception('could not find project')\n    \n    try : server = re.search('server: [\"\\']?(?P<value>https?://\\w[\\w\\.]+(:\\d+)?)[\"\\']?', kubeConfig)['value']\n    except Exception as e: raise Exception('could not find server')\n    try: ca = re.search('certificate-authority-data: [\"\\']?(?P<value>\\w+\\=*)[\"\\']?', kubeConfig)['value']\n    except Exception as e: raise Exception('could not find certificate-authority-data')\n    try:\n        cert = re.search('client-certificate-data: [\"\\']?(?P<value>\\w+\\=*)[\"\\']?', kubeConfig)['value']\n        key = re.search('client-key-data: [\"\\']?(?P<value>\\w+\\=*)[\"\\']?', kubeConfig)['value']\n    except Exception as e: raise Exception('could not find cert and key')\n    if 'clusterManifest' not in inputs or not inputs['clusterManifest']: inputs['clusterManifest'] = ''\n    clusterManifest = inputs['clusterManifest']\n    \n    # create resource\n    if inputs['clusterType'] == 'external':\n        cluster = '/cmx/api/resources/k8s/clusters/' + aa.post('/cmx/api/resources/k8s/clusters', {\n            'project': projectId,\n            'name': name,\n            'address': server,\n            'clusterType': 'EXTERNAL',\n            'caCertificate': ca,\n            'credentials': {\n                'type': 'PublicKey',\n                'publicKey': cert,\n                'privateKey': key\n            }\n        })['id']\n    \n    req = {\n        'project': projectName,\n        'name': name,\n        'type': 'k8s',\n        'isRestricted': False,\n        'properties': {\n            'kubernetesURL': server,\n            'authType': 'certificate',\n            'certAuthorityData': ca,\n            'certData': cert,\n            'certKeyData': key,\n            'fingerprint': aa.get('/codestream/api/endpoint-certificate?url={}'.format(server))['certificates'][0]['fingerprints']['SHA-256']\n        }\n    }\n    aa.post('/codestream/api/endpoint-validation', req)\n    resource = vra.post('/codestream/api/endpoints', req)\n    \n    if clusterManifest:\n        pipeline = aa.post('/codestream/api/pipelines', {\n            'project': projectName,\n            'kind': 'PIPELINE',\n            'name': '{}-{}'.format(name, str(uuid.uuid4())),\n            'description': 'kubernetes-initial-manifest',\n            'enabled': True,\n            'concurrency': 1,\n            'input': {'method': ''},\n            'output': {},\n            'starred': {},\n            'stageOrder': ['Config'],\n            'stages': {\n                'Config': {\n                    'taskOrder': ['Initial'],\n                    'tasks': {\n                        'Initial': {\n                            'type': 'K8S',\n                            'ignoreFailure': True,\n                            'preCondition': '',\n                            'input': {\n                                'action': 'APPLY',\n                                'timeout': 15,\n                                'filePath': '',\n                                'scmConstants': {},\n                                'yaml': clusterManifest\n                            },\n                            'endpoints': {'kubernetesServer': name},\n                            'tags': [],\n                            '_configured': True\n                        }\n                    },\n                    'tags': []    \n                }\n            },\n            'notifications': {'email': [], 'jira': [], 'webhook': []},\n            'options': [],\n            'workspace': {\n                'image': '',\n                'path': '',\n                'type': 'DOCKER',\n                'endpoint': '',\n                'customProperties': {},\n                'cache': [],\n                'registry': '',\n                'limits': {'cpu': 1.0, 'memory': 512},\n                'autoCloneForTrigger': False,\n                'environmentVariables': {}\n            },\n            '_inputMeta': {'method': {'description': '', 'mandatory': True}},\n            '_outputMeta': {},\n            '_warnings': [],\n            'rollbacks': [],\n            'tags': []\n        })\n        \n        aa.patch('/codestream/api/pipelines/' + pipeline['id'], {'state': 'ENABLED'})\n        try: executionLink = aa.post('/codestream/api/pipelines/{}/executions'.format(pipeline['id']), {'input': {}})['executionLink']\n        except: \n            try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n            except: pass\n        for _ in range(0, 300):\n            execution = vra.get(executionLink)\n            if execution['status'] == 'COMPLETED': break\n            elif execution['status'] == 'FAILED':\n                try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n                except: pass\n                raise Exception('cluster manifest execution failed : ' + execution['statusMessage'])\n            time.sleep(3)\n        else:\n            try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n            except: pass\n            raise Exception('cluster manifest execution might be stuck over 15 min')\n        try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n        except: pass\n    \n    # publish resource\n    outputs = inputs\n    outputs.pop('aa')\n    outputs['id'] = resource['id']\n    outputs['cluster'] = cluster\n    outputs['project'] = projectName\n    outputs['kubeConfig'] = kubeConfig\n    \n    return outputs",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 512,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d77019535f094db428c",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d77019535f094db428c?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7482f295174f32019535efd2ad4d9a": {
    "name": "Custom.Kubernetes.update",
    "createdMillis": 1740366664370,
    "updatedMillis": 1742811081223,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\n'''\n@copyright: Equal Plus\n@author: Hye-Churn Jang\n'''\n\n#===============================================================================\n# Import Libraries Here\n#===============================================================================\nimport json\nimport time\n\n\n#===============================================================================\n# AaManager SDK\n#===============================================================================\nclass AaManager:\n    def __init__(self, context): self.context = context\n    def toJson(self, response):\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\n        try: return json.loads(response['content'].decode('utf-8'))\n        except: return response['content'].decode('utf-8')\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\n    def runOrchAction(self, projectId, uri, data={}):\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\n        if 'data' in result: return result['data']\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\n        else: raise Exception('unknown error')\n\n\n#===============================================================================\n# Implement Handler Here\n# ------------------------------------------------------------------------------\n# Default : computeLink :\n# Default : interfaceLink :\n#===============================================================================\ndef handler(context, inputs):\n    # bypass resource\n    return inputs\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 512,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7482f295174f32019535efd2ad4d9a",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7482f295174f32019535efd2ad4d9a?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca3019535eefa0b02bf": {
    "name": "Custom.Kubernetes.delete",
    "createdMillis": 1740366608911,
    "updatedMillis": 1742811081114,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\n'''\n@copyright: Equal Plus\n@author: Hye-Churn Jang\n'''\n\n#===============================================================================\n# Import Libraries Here\n#===============================================================================\nimport json\nimport time\n\n\n#===============================================================================\n# AaManager SDK\n#===============================================================================\nclass AaManager:\n    def __init__(self, context): self.context = context\n    def toJson(self, response):\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\n        try: return json.loads(response['content'].decode('utf-8'))\n        except: return response['content'].decode('utf-8')\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\n    def runOrchAction(self, projectId, uri, data={}):\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\n        if 'data' in result: return result['data']\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\n        else: raise Exception('unknown error')\n\n\n#===============================================================================\n# Implement Handler Here\n# ------------------------------------------------------------------------------\n# Default : apiVersion :  2021-07-15\n#===============================================================================\ndef handler(context, inputs):\n    apiVersion = '2021-07-15'\n\n    aa = AaManager(context)\n    \n    # delete resource\n    aa.delete('/codestream/api/endpoints/' + inputs['id'])\n    if inputs['clusterType'] == 'external': aa.delete(inputs['cluster'])\n    \n    # publish null resource\n    return {}\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 512,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca3019535eefa0b02bf",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca3019535eefa0b02bf?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca3019535f02fe302c0": {
    "name": "Custom.Kubernetes.read",
    "createdMillis": 1740366688230,
    "updatedMillis": 1742811081055,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca3019535f02fe302c0",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca3019535f02fe302c0?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  }
}