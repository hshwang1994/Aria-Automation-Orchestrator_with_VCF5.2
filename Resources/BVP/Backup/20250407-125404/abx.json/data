{
  "8a7480e9926c0b1f0192887bc55300e8": {
    "name": "Cloud.vSphere.Machine.changeDisplayName",
    "createdMillis": 1737280905571,
    "updatedMillis": 1742811083304,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    displayName = inputs['newDisplayName']\r\n\r\n    compute = aa.getUerp(inputs['id'])\r\n    compute['customProperties']['displayName'] = displayName\r\n    aa.putUerp(compute['documentSelfLink'], compute)\r\n    desc = aa.getUerp(compute['descriptionLink'])\r\n    desc['customProperties']['displayName'] = displayName\r\n    aa.putUerp(desc['documentSelfLink'], desc)\r\n\r\n    return {\r\n        'displayName': displayName\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7480e9926c0b1f0192887bc55300e8",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7480e9926c0b1f0192887bc55300e8?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74812a9298740f0193622cf1c828ff": {
    "name": "Cloud.vSphere.Machine.detachBlockDisk",
    "createdMillis": 1737280905626,
    "updatedMillis": 1742811083196,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : blockDiskId : ''\r\n# Default : busNumber : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    vmName = inputs['resourceName']\r\n    diskName = inputs['diskName']\r\n    disks = []\r\n    for disk in inputs['storage']['disks']:\r\n        if diskName in disk['diskFile']:\r\n            aa.runOrchAction(inputs['project'], 'com.ecs.event/detachBlockDisk', {\r\n                'vmName': vmName,\r\n                'diskName': diskName\r\n            })\r\n        else: disks.append(disk)\r\n    inputs['storage']['disks'] = disks\r\n    return {\r\n        'storage': inputs['storage']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "diskName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74812a9298740f0193622cf1c828ff",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74812a9298740f0193622cf1c828ff?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab60192769fc5ed00e5": {
    "name": "Custom.AIP.create",
    "createdMillis": 1737280882840,
    "updatedMillis": 1742811083114,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    address = inputs['address'] if 'address' in inputs and inputs['address'] else ''\r\n    vpcProfileLink = inputs['vpc']\r\n    vpcProfile = aa.getUerp(vpcProfileLink)\r\n    subnetLink = vpcProfile['isolationExternalSubnetLink']\r\n    subnet = aa.getUerp(subnetLink)\r\n    subnetRange = aa.getUerp(f\"/resources/subnet-ranges?expand&$filter=subnetLink eq '{subnetLink}'\")\r\n    subnetRange = subnetRange['documents'][subnetRange['documentLinks'][0]]\r\n    subnetRangeLink = subnetRange['documentSelfLink']\r\n    subnetRangeId = subnetRangeLink.split('/subnet-ranges/')[1]\r\n\r\n    requestLink = aa.post(f'/iaas/api/network-ip-ranges/{subnetRangeId}/ip-addresses/allocate?apiVersion={apiVersion}', {\r\n        'ipAddresses': [address]\r\n    } if address else {\r\n        'numberOfIps': 1\r\n    })['selfLink']\r\n\r\n    for _ in range(0, 10):\r\n        time.sleep(1)\r\n        request = aa.get(requestLink)\r\n        if request['status'] == 'FINISHED':\r\n            iaasLink = request['resources'][0]\r\n            iaasIp = aa.get(f'{iaasLink}?apiVersion={apiVersion}')\r\n            iaasIpId = iaasIp['id']\r\n            ipAddress = aa.getUerp(f\"/resources/ip-addresses?expand&$filter=id eq '{iaasIpId}'\")\r\n            ipAddress = ipAddress['documents'][ipAddress['documentLinks'][0]]\r\n            ipAddressLink = ipAddress['documentSelfLink']\r\n            address = ipAddress['ipAddress']\r\n            break\r\n    else: raise Exception('could not allocate ip address')\r\n\r\n    inputs['id'] = iaasIpId\r\n    inputs['address'] = address\r\n    inputs['ipAddress'] = ipAddressLink\r\n    inputs['subnet'] = subnetLink\r\n    inputs['subnetName'] = subnet['name']\r\n    inputs['subnetRange'] = subnetRangeLink\r\n    inputs['subnetRangeName'] = subnetRange['name']\r\n    inputs['compute'] = 'NONE'\r\n    inputs['interface'] = 'NONE'\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab60192769fc5ed00e5",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab60192769fc5ed00e5?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab6019276c8b2c900f2": {
    "name": "Custom.AIP.read",
    "createdMillis": 1737280882900,
    "updatedMillis": 1742811083068,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab6019276c8b2c900f2",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab6019276c8b2c900f2?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74801d929873a00192a965bb870212": {
    "name": "Custom.Peering.read",
    "createdMillis": 1737280890712,
    "updatedMillis": 1742811083013,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74801d929873a00192a965bb870212",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74801d929873a00192a965bb870212?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74821b939d61690193be5998813188": {
    "name": "Custom.Project.changeAdministrators",
    "createdMillis": 1737280899726,
    "updatedMillis": 1742811082952,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    \r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['administrators'])\r\n    removes = [{'email': username, 'role': 'administrator', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n\r\n    return {\r\n        'administrators': newUsers\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74821b939d61690193be5998813188",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74821b939d61690193be5998813188?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926cf3bf2a0027": {
    "name": "Custom.Project.changeDisplayName",
    "createdMillis": 1737280899747,
    "updatedMillis": 1742811082895,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['id']\r\n    projectUrl = f'/iaas/api/projects/{projectId}'\r\n    displayName = inputs['newDisplayName']\r\n    project = aa.get(projectUrl)\r\n    project['description'] = displayName\r\n    aa.patch(projectUrl, project)\r\n\r\n    inputs['displayName'] = displayName\r\n    outputs = inputs\r\n    outputs.pop('newDisplayName')\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926cf3bf2a0027",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926cf3bf2a0027?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74829a93bf04610193c94fdcc1003c": {
    "name": "Custom.Project.changeMembers",
    "createdMillis": 1737280899689,
    "updatedMillis": 1742811082837,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['members'])\r\n    \r\n    removes = [{'email': username, 'role': 'member', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in inputs['administrators']: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n\r\n    return {\r\n        'members': newUsers\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74829a93bf04610193c94fdcc1003c",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74829a93bf04610193c94fdcc1003c?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809d93bf04680193c95d9b7910e5": {
    "name": "Custom.Project.changeSharedResources",
    "createdMillis": 1737280899652,
    "updatedMillis": 1742811082779,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    sharedResources = True if inputs['newSharedResources'] == 'true' else False\r\n\r\n    project = aa.patch(f'/iaas/api/projects/{projectId}', {\r\n        'sharedResources': sharedResources\r\n    })\r\n    \r\n    return {\r\n        'sharedResources': sharedResources\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newSharedResources": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809d93bf04680193c95d9b7910e5",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809d93bf04680193c95d9b7910e5?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74819a93bf04810193c9527fd0004c": {
    "name": "Custom.Project.changeSupervisors",
    "createdMillis": 1737280899786,
    "updatedMillis": 1742811082722,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    \r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['supervisors'])\r\n    removes = [{'email': username, 'role': 'supervisor', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in inputs['administrators']: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    print(modifies)\r\n    print(removes)\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n    \r\n    approvalPolicyId = inputs['approvalPolicy']\r\n    if inputs['approver'] and newUsers and inputs['approvalActions']:\r\n        if not approvalPolicyId:\r\n            approver = inputs['approver']\r\n            approvalPolicyId = aa.post('/policy/api/policies', {\r\n                'name': inputs['name'] + '-approval',\r\n                'projectId': projectId,\r\n                'enforcementType': 'HARD',\r\n                'typeId': 'com.vmware.policy.approval',\r\n                'definition': {\r\n                    'level': 1,\r\n                    'approverType': 'USER',\r\n                    'approvalMode': 'ANY_OF',\r\n                    'approvers': [f'USER:{approver}'],\r\n                    'autoApprovalDecision': inputs['autoApprovalDecision'] if 'autoApprovalDecision' in inputs and inputs['autoApprovalDecision'] else 'REJECT',\r\n                    'autoApprovalExpiry': inputs['autoApprovalExpiry'] if 'autoApprovalExpiry' in inputs and inputs['autoApprovalExpiry'] else 1,\r\n                    'actions': inputs['approvalActions']\r\n                }\r\n            })['id']\r\n    else:\r\n        if approvalPolicyId:\r\n            aa.delete(f'/policy/api/policies/{approvalPolicyId}')\r\n            approvalPolicyId = ''\r\n\r\n    return {\r\n        'supervisors': newUsers,\r\n        'approvalPolicy': approvalPolicyId\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74819a93bf04810193c9527fd0004c",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74819a93bf04810193c9527fd0004c?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809d93bf04680193c9506f4310dc": {
    "name": "Custom.Project.changeViewers",
    "createdMillis": 1737280899628,
    "updatedMillis": 1742811082669,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newUsers : []\r\n#===============================================================================\r\ndef mergeArray(arr1, arr2): return arr1 + list(set(arr2) - set(arr1))\r\ndef getNewsAndDelsArray(new, old):\r\n    news = []\r\n    dels = []\r\n    for item in mergeArray(new, old):\r\n        if item not in old: news.append(item)\r\n        if item not in new: dels.append(item)\r\n    return (news, dels)\r\n\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    \r\n    projectId = inputs['id']\r\n    newUsers = inputs['newUsers']\r\n    if newUsers: newUsers = inputs['newUsers'].split(',')\r\n    else: newUsers = []\r\n    \r\n    _, dels = getNewsAndDelsArray(newUsers, inputs['viewers'])\r\n    removes = [{'email': username, 'role': 'viewer', 'type': 'user'} for username in dels]\r\n    \r\n    modifies = []\r\n    for username in inputs['administrators']: modifies.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: modifies.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in newUsers: modifies.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: modifies.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    \r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': modifies,\r\n        'remove': removes\r\n    })\r\n\r\n    return {\r\n        'viewers': newUsers\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newUsers": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809d93bf04680193c9506f4310dc",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809d93bf04680193c9506f4310dc?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7cd7660011": {
    "name": "Custom.Project.create",
    "createdMillis": 1737280899769,
    "updatedMillis": 1742811082616,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    if 'administrators' not in inputs: inputs['administrators'] = []\r\n    if 'members' not in inputs: inputs['members'] = []\r\n    if 'viewers' not in inputs: inputs['viewers'] = []\r\n    if 'supervisors' not in inputs: inputs['supervisors'] = []\r\n    if 'sharedResources' not in inputs: inputs['sharedResources'] = False\r\n    if 'cloudZones' not in inputs: inputs['cloudZones'] = []\r\n    if 'placementPolicy' not in inputs: inputs['placementPolicy'] = 'default'\r\n    if 'catalogs' not in inputs: inputs['catalogs'] = []\r\n\r\n    project = aa.post('/iaas/api/projects', {\r\n        'name': inputs['name'],\r\n        'description': inputs['displayName'],\r\n        'sharedResources': inputs['sharedResources'],\r\n        'zoneAssignmentConfigurations': [{'zoneId': cloudZone} for cloudZone in inputs['cloudZones']],\r\n        'placementPolicy': inputs['placementPolicy'].upper()\r\n    })\r\n    projectId = project['id']\r\n    \r\n    principals = []\r\n    for username in inputs['administrators']: principals.append({\r\n        'email': username,\r\n        'role': 'administrator',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['members']: principals.append({\r\n        'email': username,\r\n        'role': 'member',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['viewers']: principals.append({\r\n        'email': username,\r\n        'role': 'viewer',\r\n        'type': 'user'\r\n    })\r\n    for username in inputs['supervisors']: principals.append({\r\n        'email': username,\r\n        'role': 'supervisor',\r\n        'type': 'user'\r\n    })\r\n    aa.patch(f'/project-service/api/projects/{projectId}/principals', {\r\n        'modify': principals\r\n    })\r\n\r\n    if inputs['catalogs']:\r\n        inputs['catalogPolicy'] = aa.post('/policy/api/policies', {\r\n            'name': inputs['name'] + '-catalog',\r\n            'projectId': projectId,\r\n            'enforcementType': 'HARD',\r\n            'typeId': 'com.vmware.policy.catalog.entitlement',\r\n            'definition': {\r\n                'entitledUsers': [{\r\n                    'userType': 'USER',\r\n                    'principals': [{\r\n                        'type': 'PROJECT',\r\n                        'referenceId': ''\r\n                    }],\r\n                    'items': [{\r\n                        'id': catalogId,\r\n                        'type': 'CATALOG_ITEM_IDENTIFIER'\r\n                    } for catalogId in inputs['catalogs']]\r\n                }]\r\n            }\r\n        })['id']\r\n    else: inputs['catalogPolicy'] = ''\r\n    \r\n    if inputs['approver'] and inputs['supervisors'] and inputs['approvalActions']:\r\n        approver = inputs['approver']\r\n        inputs['approvalPolicy'] = aa.post('/policy/api/policies', {\r\n            'name': inputs['name'] + '-approval',\r\n            'projectId': projectId,\r\n            'enforcementType': 'HARD',\r\n            'typeId': 'com.vmware.policy.approval',\r\n            'definition': {\r\n                'level': 1,\r\n                'approverType': 'USER',\r\n                'approvalMode': 'ANY_OF',\r\n                'approvers': [f'USER:{approver}'],\r\n                'autoApprovalDecision': inputs['autoApprovalDecision'] if 'autoApprovalDecision' in inputs and inputs['autoApprovalDecision'] else 'REJECT',\r\n                'autoApprovalExpiry': inputs['autoApprovalExpiry'] if 'autoApprovalExpiry' in inputs and inputs['autoApprovalExpiry'] else 1,\r\n                'actions': inputs['approvalActions']\r\n            }\r\n        })['id']\r\n    else: inputs['approvalPolicy'] = ''\r\n\r\n    if not aa.getUerp(f\"/resources/tags?expand&$filter=((key eq 'projectId') and (value eq '{projectId}'))\")['documentLinks']:\r\n        aa.postUerp('/resources/tags?expand', {\r\n            'key': 'projectId',\r\n            'value': projectId,\r\n            'isSaved': True,\r\n            'origins': ['USER_DEFINED']\r\n        })\r\n\r\n    inputs['id'] = projectId\r\n    inputs['selfId'] = projectId\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7cd7660011",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7cd7660011?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7f53a40015": {
    "name": "Custom.VPC.read",
    "createdMillis": 1737280912460,
    "updatedMillis": 1742811082567,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7f53a40015",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7f53a40015?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7d1dcf0012": {
    "name": "Custom.Project.read",
    "createdMillis": 1737280899708,
    "updatedMillis": 1742811082490,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7d1dcf0012",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7d1dcf0012?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7d6a960013": {
    "name": "Custom.Project.delete",
    "createdMillis": 1737280899670,
    "updatedMillis": 1742811082438,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['id']\r\n    if aa.get(f'/deployment/api/deployments?projects={projectId}')['content']: raise Exception('project has deployment')\r\n    project = aa.get(f'/iaas/api/projects/{projectId}')\r\n    project['zoneAssignmentConfigurations'] = []\r\n    aa.patch(f'/iaas/api/projects/{projectId}', project)\r\n    aa.delete(f'/iaas/api/projects/{projectId}')\r\n    catalogPolicyId = inputs['catalogPolicy']\r\n    if catalogPolicyId:\r\n        try: aa.delete(f'/policy/api/policies/{catalogPolicyId}')\r\n        except: pass\r\n    approvalPolicyId = inputs['approvalPolicy']\r\n    if approvalPolicyId:\r\n        try: aa.delete(f'/policy/api/policies/{approvalPolicyId}')\r\n        except: pass\r\n    for projectIdTagLink in aa.getUerp(f\"/resources/tags?$filter=((key eq 'projectId') and (value eq '{projectId}'))\")['documentLinks']:\r\n        try: aa.deleteUerp(f'{projectIdTagLink}?ignoreUsage=true')\r\n        except: pass\r\n\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7d6a960013",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7d6a960013?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca30194f3f244e75b3d": {
    "name": "Cloud.NSX.LoadBalancer.changeServerPool",
    "createdMillis": 1739259528425,
    "updatedMillis": 1742811082375,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : machineIds : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    targetLinks = inputs['targetLinks'].split(',') if inputs['targetLinks'] else []\r\n    print(targetLinks)\r\n    lbId = inputs['resourceId']\r\n    taskUrl = aa.post(f'/iaas/api/load-balancers/{lbId}/operations/scale', {\r\n        'targetLinks': targetLinks\r\n    })['selfLink']\r\n    \r\n    while True:\r\n        time.sleep(1)\r\n        task = aa.get(taskUrl)\r\n        status = task['status']\r\n        if status == 'FINISHED': break;\r\n        elif status == 'FAILED': raise Exception(task['message'])\r\n    \r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "targetLinks": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca30194f3f244e75b3d",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca30194f3f244e75b3d?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74829294779cae0194fe99520d014a": {
    "name": "Cloud.SecurityGroup.changeDisplayName",
    "createdMillis": 1739438248465,
    "updatedMillis": 1742811082307,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    return {'displayName': inputs['newDisplayName']}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74829294779cae0194fe99520d014a",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74829294779cae0194fe99520d014a?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926cfa34490030": {
    "name": "Custom.VPC.changeDisplayName",
    "createdMillis": 1737280912505,
    "updatedMillis": 1742811082255,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    displayName = inputs['newDisplayName']\r\n    vpcProfileLink = inputs['vpcProfile']\r\n    vpcProfile = aa.getUerp(vpcProfileLink)\r\n    vpcProfile['desc'] = displayName\r\n    aa.putUerp(vpcProfileLink, vpcProfile)\r\n    return {\r\n        'displayName': displayName\r\n    }\r\n    \r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926cfa34490030",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926cfa34490030?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601927fc2096401b0": {
    "name": "Cloud.NSX.Network.changeDisplayName",
    "createdMillis": 1737280905551,
    "updatedMillis": 1742811082178,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newDisplayName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # aa = AaManager(context)\r\n    # displayName = inputs['newDisplayName']\r\n    # networkLink = inputs['id']\r\n    # network = aa.getUerp(networkLink)\r\n    # network['customProperties']['displayName'] = displayName\r\n    # network = aa.putUerp(networkLink, network)\r\n    # subnetLink = network['subnetLink']\r\n    # subnet = aa.getUerp(subnetLink)\r\n    # subnet['customProperties']['displayName'] = displayName\r\n    # subnet = aa.putUerp(subnetLink, subnet)\r\n    # return {\r\n    #     'displayName': displayName\r\n    # }\r\n    return {\r\n        'displayName': inputs['newDisplayName']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "newDisplayName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601927fc2096401b0",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601927fc2096401b0?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7480e9926c0b1f01928fbe16be0105": {
    "name": "Cloud.vSphere.Machine.changeIpAddress",
    "createdMillis": 1737280905607,
    "updatedMillis": 1742811082092,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : interfaceLink : ''\r\n# Default : newIpAddress : ''\r\n# Default : releaseMode : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    computeLink = inputs['id']\r\n    interfaceLink = inputs['interfaceLink']\r\n    newIpAddress = inputs['newIpAddress']\r\n    releaseMode = inputs['releaseMode'].upper()\r\n    adminUsername = inputs['adminUsername']\r\n    adminPassword = context.getSecret(inputs['adminPassword'])\r\n    interface = aa.getUerp(interfaceLink)\r\n\r\n    aa.runOrchAction(inputs['project'], 'com.bvp.bp.vm/changeIpAddress', {\r\n        'computeLink': computeLink,\r\n        'interfaceLink': interfaceLink,\r\n        'newIpAddress': newIpAddress,\r\n        'releaseMode': releaseMode,\r\n        'adminUsername': adminUsername,\r\n        'adminPassword': adminPassword\r\n    })\r\n    if interface['customProperties']['primaryAddress'] == 'true' or interface['id'] == inputs['primaryMAC']: inputs['address'] = newIpAddress\r\n    for network in inputs['networks']:\r\n        if network['id'] == interfaceLink:\r\n            network['address'] = newIpAddress\r\n            break\r\n\r\n    return {\r\n        'address': inputs['address'],\r\n        'networks': inputs['networks']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "releaseMode": "",
      "newIpAddress": "",
      "interfaceLink": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7480e9926c0b1f01928fbe16be0105",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7480e9926c0b1f01928fbe16be0105?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab6019276c943f300f3": {
    "name": "Custom.AIP.delete",
    "createdMillis": 1737280882941,
    "updatedMillis": 1742811082033,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    subnetRangeLink = inputs['subnetRange']\r\n    subnetRangeId = subnetRangeLink.split('/subnet-ranges/')[1]\r\n\r\n    if inputs['compute'] != 'NONE':\r\n        projectId = inputs['__metadata']['project']\r\n        accessIpId = inputs['id']\r\n        interfaceLink = inputs['interface']\r\n        aa.runOrchAction(projectId, 'com.bvp.bp.aip/detachAccessIp', {\r\n            'interfaceLink': interfaceLink,\r\n            'accessIpId': accessIpId\r\n        })\r\n    requestLink = aa.post(f'/iaas/api/network-ip-ranges/{subnetRangeId}/ip-addresses/release?apiVersion={apiVersion}', {\r\n        'ipAddresses': [inputs['address']]\r\n    })['selfLink']\r\n    for _ in range(0, 10):\r\n        time.sleep(1)\r\n        request = aa.get(requestLink)\r\n        if request['status'] == 'FINISHED': break\r\n    else: raise Exception('could not release ip address')\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab6019276c943f300f3",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab6019276c943f300f3?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601928a9719ae01ef": {
    "name": "Custom.AIP.detach",
    "createdMillis": 1737280882923,
    "updatedMillis": 1742811081978,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}): return self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})['data']\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    if inputs['compute'] == 'NONE': raise Exception('Access IP is not attached')\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    accessIpId = inputs['id']\r\n    interfaceLink = inputs['interface']\r\n\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.aip/detachAccessIp', {\r\n        'interfaceLink': interfaceLink,\r\n        'accessIpId': accessIpId\r\n    })\r\n\r\n    inputs['compute'] = 'NONE'\r\n    inputs['computeName'] = ''\r\n    inputs['interface'] = 'NONE'\r\n    inputs['interfaceAddress'] = ''\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601928a9719ae01ef",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601928a9719ae01ef?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601928a6f461901ea": {
    "name": "Custom.AIP.attach",
    "createdMillis": 1737280882879,
    "updatedMillis": 1742811081917,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : computeLink :\r\n# Default : interfaceLink :\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    if inputs['compute'] != 'NONE': raise Exception('Access IP already has allocated another machine')\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    accessIpId = inputs['id']\r\n    computeLink = inputs['computeLink']\r\n    compute = aa.getUerp(computeLink);\r\n    interfaceLink = inputs['interfaceLink']\r\n    for aip in aa.get(f'/deployment/api/resources?resourceTypes=Custom.AIP&projects={projectId}')['content']:\r\n        if aip['properties']['id'] == accessIpId:\r\n            resourceId = aip['id']\r\n            break\r\n    else: raise Exception('could not find current resource id')\r\n    interfaceAddress = aa.runOrchAction(projectId, 'com.bvp.bp.aip/attachAccessIp', {\r\n        'interfaceLink': interfaceLink,\r\n        'accessIpId': accessIpId,\r\n        'resourceId': resourceId\r\n    })\r\n\r\n    inputs['compute'] = computeLink\r\n    inputs['computeName'] = compute['name']\r\n    inputs['interface'] = interfaceLink\r\n    inputs['interfaceAddress'] = interfaceAddress\r\n    outputs = inputs\r\n    outputs.pop(\"computeLink\")\r\n    outputs.pop('interfaceLink')\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "computeLink": "",
      "interfaceLink": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601928a6f461901ea",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601928a6f461901ea?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74801d929873a00192a96576b00211": {
    "name": "Custom.Peering.create",
    "createdMillis": 1737280890687,
    "updatedMillis": 1742811081853,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\nimport uuid\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    peeringId = str(uuid.uuid4())\r\n    projectId = inputs['__metadata']['project']\r\n    subnetLink1 = inputs['subnet1']\r\n    subnetLink2 = inputs['subnet2']\r\n\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.peer/peeringProvision', {\r\n        'peeringId': peeringId,\r\n        'subnetLink1': subnetLink1,\r\n        'subnetLink2': subnetLink2\r\n    })\r\n\r\n    inputs['id'] = peeringId\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74801d929873a00192a96576b00211",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74801d929873a00192a96576b00211?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74801d929873a00192a96643fe0213": {
    "name": "Custom.Peering.delete",
    "createdMillis": 1737280890652,
    "updatedMillis": 1742811081792,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    peeringId = inputs['id']\r\n    projectId = inputs['__metadata']['project']\r\n    subnetLink1 = inputs['subnet1']\r\n    subnetLink2 = inputs['subnet2']\r\n\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.peer/peeringRemoval', {\r\n        'peeringId': peeringId,\r\n        'subnetLink1': subnetLink1,\r\n        'subnetLink2': subnetLink2\r\n    })\r\n\r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74801d929873a00192a96643fe0213",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74801d929873a00192a96643fe0213?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7f198b0014": {
    "name": "Custom.VPC.create",
    "createdMillis": 1737280912490,
    "updatedMillis": 1742811081740,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    name = inputs['name']\r\n    displayName = inputs['displayName']\r\n    projectId = inputs['__metadata']['project']\r\n    project = aa.get(f'/iaas/api/projects/{projectId}')\r\n    projectName = project['name']\r\n\r\n    vpcTagCategory = inputs['vpcTagCategory']\r\n    vpcInfraProfileLink = inputs['vpcInfraProfile']\r\n    vpcInfraProfile = aa.getUerp(vpcInfraProfileLink)\r\n    vpcInfraProfileName = vpcInfraProfile['desc']\r\n    transitSubnetLink = vpcInfraProfile['subnetLinks'][0]\r\n    transitSubnet = aa.getUerp(transitSubnetLink)\r\n    transitSegmentPath = transitSubnet['customProperties']['__path']\r\n    transitPrefix = transitSubnet['subnetCIDR'].split('/')[1]\r\n    managedGatewayLink = inputs['managedGateway']\r\n    managedGateway = aa.getUerp(managedGatewayLink)\r\n    managedRouterLink = managedGateway['routerStateLink']\r\n    managedRouter = aa.getUerp(managedRouterLink)\r\n    routerName = managedRouter['name']\r\n    endpointLink = managedRouter['endpointLink']\r\n    managedTier1Path = aa.getUerp(managedRouterLink)['customProperties']['__path']\r\n    managedNetworkLink = inputs['managedNetwork']\r\n    managedNetwork = aa.getUerp(managedNetworkLink)\r\n    managedSubnetLink = managedNetwork['subnetLink']\r\n    managedSubnet = aa.getUerp(managedSubnetLink)\r\n    managedSegmentPath = managedSubnet['customProperties']['__path']\r\n    managedLoadBalancerLink = inputs['managedLoadBalancer']\r\n    managedLoadBalancer = aa.getUerp(managedLoadBalancerLink)\r\n\r\n    for transitRangeLink, transitRange in aa.getUerp(f\"/resources/subnet-ranges?expand&$filter=subnetLinks.item eq '{transitSubnetLink}'\")['documents'].items():\r\n        transitRangeId = transitRangeLink.split(\"/subnet-ranges/\")[1]\r\n        ipTaskLink = aa.post(f'/iaas/api/network-ip-ranges/{transitRangeId}/ip-addresses/allocate?apiVersion={apiVersion}', {\"numberOfIps\": 1})['selfLink'];\r\n        for _ in range(0, 10):\r\n            time.sleep(1)\r\n            ipTask = aa.get(ipTaskLink)\r\n            if ipTask['status'] == 'FINISHED':\r\n                ipId = ipTask['resources'][0].split(\"/ip-addresses/\")[1]\r\n                transitIpAddressLink = aa.getUerp(f\"/resources/ip-addresses?$filter=id eq '{ipId}'\")['documentLinks'][0]\r\n                transitIpAddress = aa.getUerp(transitIpAddressLink)\r\n                transitAddress = transitIpAddress['ipAddress']\r\n                aa.runOrchAction(projectId, 'com.bvp.bp.vpc/vpcProvision', {\r\n                    'endpointLink': endpointLink,\r\n                    'managedRouterLink': managedRouterLink,\r\n                    'managedTier1Path': managedTier1Path,\r\n                    'transitSegmentPath': transitSegmentPath,\r\n                    'transitAddressLink': transitIpAddressLink,\r\n                    'transitPrefix': transitPrefix\r\n                })\r\n                break\r\n        else: raise Exception('could not allocate transit address')\r\n        break\r\n    else: raise Exception('could not find transit address range')\r\n\r\n    domain = managedSubnet['domain']\r\n    projectDomain = f'{projectName}.{domain}'\r\n\r\n    managedSubnet['domain'] = projectDomain\r\n    managedSubnet['dnsSearchDomains'] = [projectDomain]\r\n    managedSubnet = aa.putUerp(managedSubnetLink, managedSubnet)\r\n    managedNetwork['customProperties']['domain'] = projectDomain\r\n    managedNetwork['customProperties']['dnsSearchDomains'] = f'[{projectDomain}]'\r\n    managedNetwork = aa.putUerp(managedNetworkLink, managedNetwork)\r\n    managedIpAddress = aa.getUerp(f\"/resources/ip-addresses?expand&$filter=connectedResourceLink eq '{managedSubnetLink}'\")\r\n    managedIpAddressLink = managedIpAddress['documentLinks'][0]\r\n    managedIpAddress = managedIpAddress['documents'][managedIpAddressLink]\r\n    managedAddress = managedIpAddress['ipAddress']\r\n\r\n    vpcProfile = {\r\n        'name': name,\r\n        'desc': displayName,\r\n        'provisioningRegionLink': vpcInfraProfile['provisioningRegionLink'],\r\n        'isolationType': 'SUBNET',\r\n        'isolationNetworkLink': vpcInfraProfile['isolationNetworkLink'],\r\n        'isolationExternalSubnetLink': vpcInfraProfile['isolationExternalSubnetLink'],\r\n        'isolationNetworkCIDR': vpcInfraProfile['isolationNetworkCIDR'],\r\n        'isolatedSubnetCIDRPrefix': vpcInfraProfile['isolatedSubnetCIDRPrefix'],\r\n        'customProperties': {\r\n            'onDemandNetworkIPAssignmentType': 'static',\r\n            'edgeClusterRouterStateLink': vpcInfraProfile['customProperties']['edgeClusterRouterStateLink'],\r\n            'tier0LogicalRouterStateLink': vpcInfraProfile['customProperties']['tier0LogicalRouterStateLink'],\r\n            'vpcProjectId': projectId,\r\n            'vpcProjectName': projectName,\r\n            'vpcProjectDomain': projectDomain,\r\n            'vpcRouterName': routerName,\r\n            'vpcManagedGatewayLink': managedGatewayLink,\r\n            'vpcManagedRouterLink': managedRouterLink,\r\n            'vpcManagedTier1Path': managedTier1Path,\r\n            'vpcManagedNetworkLink': managedNetworkLink,\r\n            'vpcManagedSubnetLink': managedSubnetLink,\r\n            'vpcManagedSegmentPath': managedSegmentPath,\r\n            'vpcManagedIpAddressLink': managedIpAddressLink,\r\n            'vpcManagedAddress': managedAddress,\r\n            'vpcManagedLoadBalancerLink': managedLoadBalancerLink,\r\n            'vpcInfraProfileLink': vpcInfraProfileLink,\r\n            'vpcTransitSubnetLink': transitSubnetLink,\r\n            'vpcTransitSegmentPath': transitSegmentPath,\r\n            'vpcTransitIpAddressLink': transitIpAddressLink,\r\n            'vpcTransitAddress': transitAddress,\r\n            'vpcDnsServerAddresses': json.dumps(managedSubnet['dnsServerAddresses']),\r\n        },\r\n        'subnets': [managedSubnet],\r\n        'subnetLinks': [managedSubnetLink],\r\n        'loadBalancers': [managedLoadBalancer],\r\n        'loadBalancerLinks': [managedLoadBalancerLink],\r\n        'securityGroups': [],\r\n        'securityGroupLinks': []\r\n    }\r\n\r\n    vpcProfile = aa.postUerp('/provisioning/resources/network-profiles', vpcProfile)\r\n    vpcProfileLink = vpcProfile['documentSelfLink']\r\n    vpcId = vpcProfileLink.split('/network-profiles/')[1]\r\n\r\n    vpcIdTag = aa.getUerp(f\"/resources/tags?expand&$filter=((key eq 'vpcId') and (value eq '{vpcId}'))\")\r\n    if vpcIdTag['documentLinks']: vpcIdTag = vpcIdTag['documents'][vpcIdTag['documentLinks'][0]]\r\n    else:\r\n        vpcIdTag = aa.postUerp('/resources/tags?expand', {\r\n            'key': vpcTagCategory,\r\n            'value': vpcId,\r\n            'isSaved': True,\r\n            'origins': ['USER_DEFINED']\r\n        })\r\n\r\n    vpcProfile['tags'] = [vpcIdTag]\r\n    vpcProfile['tagLinks'] = [vpcIdTag['documentSelfLink']]\r\n    vpcProfile = aa.putUerp(vpcProfileLink, vpcProfile)\r\n\r\n    inputs['id'] = vpcId\r\n    inputs['projectName'] = projectName\r\n    inputs['infraName'] = vpcInfraProfileName\r\n    inputs['routerName'] = routerName\r\n    inputs['projectDomain'] = projectDomain\r\n    inputs['vpcProfile'] = vpcProfileLink\r\n    inputs['managedRouter'] = managedRouterLink\r\n    inputs['managedTier1'] = managedTier1Path\r\n    inputs['managedSubnet'] = managedSubnetLink\r\n    inputs['managedSegment'] = managedSegmentPath\r\n    inputs['managedIpAddress'] = managedIpAddressLink\r\n    inputs['managedAddress'] = managedAddress\r\n    inputs['transitSubnet'] = transitSubnetLink\r\n    inputs['transitSegment'] = transitSegmentPath\r\n    inputs['transitIpAddress'] = transitIpAddressLink\r\n    inputs['transitAddress'] = transitAddress\r\n    \r\n    outputs = inputs\r\n    return outputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7f198b0014",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7f198b0014?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7481dd926c0ab601926c7f90410016": {
    "name": "Custom.VPC.delete",
    "createdMillis": 1737280912476,
    "updatedMillis": 1742811081679,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    apiVersion = '2021-07-15'\r\n\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    vpcId = inputs['id']\r\n    vpcProfileLink = inputs['vpcProfile']\r\n    if aa.getUerp(f\"/provisioning/resources/compute-networks?$filter=((networkType eq 'PRIVATE') and (customProperties.vpc eq '{vpcProfileLink}'))\")['documentLinks']:\r\n        raise Exception('vpc has segment')\r\n    for aip in aa.get(f\"/deployment/api/resources?resourceTypes=Custom.AIP&projects={projectId}\")['content']:\r\n        if aip['properties']['vpc'] == vpcProfileLink: raise Exception('vpc has access ip')\r\n    managedRouterLink = inputs['managedRouter']\r\n    managedRouter = aa.getUerp(managedRouterLink)\r\n    endpointLink = managedRouter['endpointLink']\r\n    managedTier1Path = inputs['managedTier1']\r\n    aa.runOrchAction(projectId, 'com.bvp.bp.vpc/vpcRemoval', {\r\n        'endpointLink': endpointLink,\r\n        'managedRouterLink': managedRouterLink,\r\n        'managedTier1Path': managedTier1Path\r\n    })\r\n    transitIpAddress = aa.getUerp(inputs['transitIpAddress'])\r\n    transitRangeId = transitIpAddress['subnetRangeLink'].split('/subnet-ranges/')[1]\r\n    requestLink = aa.post(f'/iaas/api/network-ip-ranges/{transitRangeId}/ip-addresses/release?apiVersion={apiVersion}', {\r\n        'ipAddresses': [transitIpAddress['ipAddress']]\r\n    })['selfLink']\r\n    for _ in range(0, 10):\r\n        time.sleep(1)\r\n        request = aa.get(requestLink)\r\n        if request['status'] == 'FINISHED': break\r\n    else: raise Exception('could not release tansit address')\r\n\r\n    aa.deleteUerp(vpcProfileLink)\r\n\r\n    vpcIdTag = aa.getUerp(f\"/resources/tags?expand&$filter=((key eq 'vpcId') and (value eq '{vpcId}'))\")\r\n    if vpcIdTag['documentLinks']:\r\n        vpcIdTagLink = vpcIdTag['documentLinks'][0]\r\n        aa.deleteUerp(f'{vpcIdTagLink}?ignoreUsage=true')\r\n\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7481dd926c0ab601926c7f90410016",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7481dd926c0ab601926c7f90410016?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7482f295174f3201951d2fe5020cd5": {
    "name": "Custom.NFS.read",
    "createdMillis": 1739951432973,
    "updatedMillis": 1742811081624,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7482f295174f3201951d2fe5020cd5",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7482f295174f3201951d2fe5020cd5?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74818f94779d7701951d3060c34228": {
    "name": "Custom.NFS.delete",
    "createdMillis": 1739951464650,
    "updatedMillis": 1742811081558,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    return {}\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d7701951d3060c34228",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d7701951d3060c34228?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca301951d2f8f200296": {
    "name": "Custom.NFS.create",
    "createdMillis": 1739951410979,
    "updatedMillis": 1742811081489,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : apiVersion :  2021-07-15\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    compute = aa.getUerp(inputs['compute'])\r\n    inputs['name'] = compute['name']\r\n    inputs['address'] = compute['address']\r\n    return inputs",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca301951d2f8f200296",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca301951d2f8f200296?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74818f94779d770194fd01f3004143": {
    "name": "Cloud.vSphere.Machine.changeSecurityGroup",
    "createdMillis": 1739411550987,
    "updatedMillis": 1742811081431,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : newSecurityGroupCodeName : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n\r\n    projectId = inputs['__metadata']['project']\r\n    computeId = inputs['id']\r\n    dfwTag = inputs['_dfw_tag_category']\r\n    securityGroupCodeName = inputs['newSecurityGroupCodeName']\r\n    \r\n    resourceId = computeId.split(\"/resources/compute/\")[1]\r\n    tagObjects = []\r\n    if securityGroupCodeName and securityGroupCodeName != '-':\r\n        tagObject = {\r\n            \"key\": dfwTag,\r\n            \"value\": securityGroupCodeName\r\n        }\r\n        tagObjects = [ tagObject ]\r\n\r\n        #\"tags\":[{\"key\":\"dfwId\",\"value\":\"jpq0byah-i1qe1wd6\"}]\r\n    newMachineDocument = aa.post(\"/deployment/api/resources/\" + resourceId + \"/requests\", {\r\n        \"actionId\": \"Cloud.vSphere.Machine.Update.Tags\",\r\n        \"inputs\": { \r\n            \"tags\": tagObjects \r\n        }\r\n    });\r\n    \r\n    print (newMachineDocument)\r\n    \r\n    return {\r\n        'securityGroupCodeName': securityGroupCodeName\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "_dfw_tag_category": "dfwId",
      "newSecurityGroupCodeName": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d770194fd01f3004143",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d770194fd01f3004143?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74812a9298740f019361dd54f128f6": {
    "name": "Cloud.vSphere.Machine.attachBlockDisk",
    "createdMillis": 1737280905589,
    "updatedMillis": 1742811081352,
    "metadata": {},
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\nimport json\r\nimport time\r\n\r\n\r\n#===============================================================================\r\n# AaManager SDK\r\n#===============================================================================\r\nclass AaManager:\r\n    def __init__(self, context): self.context = context\r\n    def toJson(self, response):\r\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\r\n        try: return json.loads(response['content'].decode('utf-8'))\r\n        except: return response['content'].decode('utf-8')\r\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\r\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\r\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\r\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\r\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\r\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\r\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\r\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\r\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\r\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\r\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\r\n    def runOrchAction(self, projectId, uri, data={}):\r\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\r\n        if 'data' in result: return result['data']\r\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\r\n        else: raise Exception('unknown error')\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n# ------------------------------------------------------------------------------\r\n# Default : blockDiskId : ''\r\n# Default : busNumber : ''\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    aa = AaManager(context)\r\n    vmName = inputs['resourceName']\r\n    blockDiskId = inputs['blockDiskId']\r\n    resourceLink = f'/resources/disks/{blockDiskId}'\r\n    disk = aa.get(f'/deployment/api/resources/{blockDiskId}')\r\n    properties = disk['properties']\r\n    diskFile = properties['diskFile']\r\n    diskSizeGb = properties['capacityGb']\r\n    busNumber = int(inputs['busNumber'])\r\n    aa.runOrchAction(inputs['project'], 'com.bvp.bp.vm/attachBlockDisk', {\r\n        'vmName': vmName,\r\n        'diskFile': diskFile,\r\n        'diskSizeGb': diskSizeGb,\r\n        'busNumber': busNumber\r\n    })\r\n    inputs['storage']['disks'].append({\r\n        'name': properties['displayName'],\r\n        'type': 'HDD',\r\n        'diskFile': diskFile,\r\n        'encrypted': False,\r\n        'independent': \"true\",\r\n        'capacityGb': diskSizeGb,\r\n        'resourceLink': resourceLink,\r\n        'provisioningType': properties['provisioningType']\r\n    })\r\n    return {\r\n        'storage': inputs['storage']\r\n    }\r\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {
      "busNumber": "",
      "blockDiskId": ""
    },
    "cpuShares": 1024,
    "memoryInMB": 300,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74812a9298740f019361dd54f128f6",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74812a9298740f019361dd54f128f6?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74818f94779d77019535f094db428c": {
    "name": "Custom.Kubernetes.create",
    "createdMillis": 1740366714078,
    "updatedMillis": 1742811081287,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\n'''\n@copyright: Equal Plus\n@author: Hye-Churn Jang\n'''\n\n#===============================================================================\n# Import Libraries Here\n#===============================================================================\nimport json\nimport time\nimport uuid\n\n\n#===============================================================================\n# AaManager SDK\n#===============================================================================\nclass AaManager:\n    def __init__(self, context): self.context = context\n    def toJson(self, response):\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\n        try: return json.loads(response['content'].decode('utf-8'))\n        except: return response['content'].decode('utf-8')\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\n    def runOrchAction(self, projectId, uri, data={}):\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\n        if 'data' in result: return result['data']\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\n        else: raise Exception('unknown error')\n\n\n#===============================================================================\n# Implement Handler Here\n#===============================================================================\nimport re\nimport uuid\nimport time\n\n# Implement Handler Here\ndef handler(context, inputs):\n    # set common values\n    aa = AaManager(context)\n    \n    # set default values\n    if 'name' not in inputs or not inputs['name']: raise Exception('name property must be required') # Required\n    name = inputs['name']\n    if 'clusterType' not in inputs or not inputs['clusterType'] or inputs['clusterType'] not in ['tanzu', 'external']: raise Exception('clusterType property must be required') # Required\n    if inputs['clusterType'] == 'tanzu':\n        if 'cluster' not in inputs or not inputs['cluster']: raise Exception('cluster property must be required') # Required\n        cluster = inputs['cluster']\n        headers = {\n            'Authorization': vra.headers['Authorization'],\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Accept-Language': 'ko,en-US;q=0.9,en;q=0.8,ko-KR;q=0.7'\n        }\n        kubeConfig = requests.get('https://{}{}/kube-config'.format(vra.hostname, cluster), headers=headers)\n        kubeConfig.raise_for_status()\n        kubeConfig = kubeConfig.text\n        projectId = aa.get(cluster)['projectId']\n        projectName = aa.get('/iaas/api/projects/{}'.format(projectId))['name']\n    elif inputs['clusterType'] == 'external':\n        if 'kubeConfig' not in inputs or not inputs['kubeConfig']: raise Exception('kubeConfig property must be required') # Required\n        if 'project' not in inputs or not inputs['project']: raise Exception('project property must be required') # Required\n        kubeConfig = inputs['kubeConfig']\n        projectName = inputs['project']\n        try: projectId = aa.get(\"/iaas/api/projects?$filter=(name eq '{}')\".format(projectName))['content'][0]['id']\n        except Exception as e: raise Exception('could not find project')\n    \n    try : server = re.search('server: [\"\\']?(?P<value>https?://\\w[\\w\\.]+(:\\d+)?)[\"\\']?', kubeConfig)['value']\n    except Exception as e: raise Exception('could not find server')\n    try: ca = re.search('certificate-authority-data: [\"\\']?(?P<value>\\w+\\=*)[\"\\']?', kubeConfig)['value']\n    except Exception as e: raise Exception('could not find certificate-authority-data')\n    try:\n        cert = re.search('client-certificate-data: [\"\\']?(?P<value>\\w+\\=*)[\"\\']?', kubeConfig)['value']\n        key = re.search('client-key-data: [\"\\']?(?P<value>\\w+\\=*)[\"\\']?', kubeConfig)['value']\n    except Exception as e: raise Exception('could not find cert and key')\n    if 'clusterManifest' not in inputs or not inputs['clusterManifest']: inputs['clusterManifest'] = ''\n    clusterManifest = inputs['clusterManifest']\n    \n    # create resource\n    if inputs['clusterType'] == 'external':\n        cluster = '/cmx/api/resources/k8s/clusters/' + aa.post('/cmx/api/resources/k8s/clusters', {\n            'project': projectId,\n            'name': name,\n            'address': server,\n            'clusterType': 'EXTERNAL',\n            'caCertificate': ca,\n            'credentials': {\n                'type': 'PublicKey',\n                'publicKey': cert,\n                'privateKey': key\n            }\n        })['id']\n    \n    req = {\n        'project': projectName,\n        'name': name,\n        'type': 'k8s',\n        'isRestricted': False,\n        'properties': {\n            'kubernetesURL': server,\n            'authType': 'certificate',\n            'certAuthorityData': ca,\n            'certData': cert,\n            'certKeyData': key,\n            'fingerprint': aa.get('/codestream/api/endpoint-certificate?url={}'.format(server))['certificates'][0]['fingerprints']['SHA-256']\n        }\n    }\n    aa.post('/codestream/api/endpoint-validation', req)\n    resource = vra.post('/codestream/api/endpoints', req)\n    \n    if clusterManifest:\n        pipeline = aa.post('/codestream/api/pipelines', {\n            'project': projectName,\n            'kind': 'PIPELINE',\n            'name': '{}-{}'.format(name, str(uuid.uuid4())),\n            'description': 'kubernetes-initial-manifest',\n            'enabled': True,\n            'concurrency': 1,\n            'input': {'method': ''},\n            'output': {},\n            'starred': {},\n            'stageOrder': ['Config'],\n            'stages': {\n                'Config': {\n                    'taskOrder': ['Initial'],\n                    'tasks': {\n                        'Initial': {\n                            'type': 'K8S',\n                            'ignoreFailure': True,\n                            'preCondition': '',\n                            'input': {\n                                'action': 'APPLY',\n                                'timeout': 15,\n                                'filePath': '',\n                                'scmConstants': {},\n                                'yaml': clusterManifest\n                            },\n                            'endpoints': {'kubernetesServer': name},\n                            'tags': [],\n                            '_configured': True\n                        }\n                    },\n                    'tags': []    \n                }\n            },\n            'notifications': {'email': [], 'jira': [], 'webhook': []},\n            'options': [],\n            'workspace': {\n                'image': '',\n                'path': '',\n                'type': 'DOCKER',\n                'endpoint': '',\n                'customProperties': {},\n                'cache': [],\n                'registry': '',\n                'limits': {'cpu': 1.0, 'memory': 512},\n                'autoCloneForTrigger': False,\n                'environmentVariables': {}\n            },\n            '_inputMeta': {'method': {'description': '', 'mandatory': True}},\n            '_outputMeta': {},\n            '_warnings': [],\n            'rollbacks': [],\n            'tags': []\n        })\n        \n        aa.patch('/codestream/api/pipelines/' + pipeline['id'], {'state': 'ENABLED'})\n        try: executionLink = aa.post('/codestream/api/pipelines/{}/executions'.format(pipeline['id']), {'input': {}})['executionLink']\n        except: \n            try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n            except: pass\n        for _ in range(0, 300):\n            execution = vra.get(executionLink)\n            if execution['status'] == 'COMPLETED': break\n            elif execution['status'] == 'FAILED':\n                try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n                except: pass\n                raise Exception('cluster manifest execution failed : ' + execution['statusMessage'])\n            time.sleep(3)\n        else:\n            try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n            except: pass\n            raise Exception('cluster manifest execution might be stuck over 15 min')\n        try: aa.delete('/codestream/api/pipelines/' + pipeline['id'])\n        except: pass\n    \n    # publish resource\n    outputs = inputs\n    outputs.pop('aa')\n    outputs['id'] = resource['id']\n    outputs['cluster'] = cluster\n    outputs['project'] = projectName\n    outputs['kubeConfig'] = kubeConfig\n    \n    return outputs",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 512,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74818f94779d77019535f094db428c",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74818f94779d77019535f094db428c?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a7482f295174f32019535efd2ad4d9a": {
    "name": "Custom.Kubernetes.update",
    "createdMillis": 1740366664370,
    "updatedMillis": 1742811081223,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\n'''\n@copyright: Equal Plus\n@author: Hye-Churn Jang\n'''\n\n#===============================================================================\n# Import Libraries Here\n#===============================================================================\nimport json\nimport time\n\n\n#===============================================================================\n# AaManager SDK\n#===============================================================================\nclass AaManager:\n    def __init__(self, context): self.context = context\n    def toJson(self, response):\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\n        try: return json.loads(response['content'].decode('utf-8'))\n        except: return response['content'].decode('utf-8')\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\n    def runOrchAction(self, projectId, uri, data={}):\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\n        if 'data' in result: return result['data']\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\n        else: raise Exception('unknown error')\n\n\n#===============================================================================\n# Implement Handler Here\n# ------------------------------------------------------------------------------\n# Default : computeLink :\n# Default : interfaceLink :\n#===============================================================================\ndef handler(context, inputs):\n    # bypass resource\n    return inputs\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 512,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a7482f295174f32019535efd2ad4d9a",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a7482f295174f32019535efd2ad4d9a?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca3019535eefa0b02bf": {
    "name": "Custom.Kubernetes.delete",
    "createdMillis": 1740366608911,
    "updatedMillis": 1742811081114,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\n'''\n@copyright: Equal Plus\n@author: Hye-Churn Jang\n'''\n\n#===============================================================================\n# Import Libraries Here\n#===============================================================================\nimport json\nimport time\n\n\n#===============================================================================\n# AaManager SDK\n#===============================================================================\nclass AaManager:\n    def __init__(self, context): self.context = context\n    def toJson(self, response):\n        if response['status'] >= 400: raise Exception(response['content'].decode('utf-8'))\n        try: return json.loads(response['content'].decode('utf-8'))\n        except: return response['content'].decode('utf-8')\n    def encode(self, url): return url.replace(' ', '%20').replace('$', '%24').replace(\"'\", '%27').replace('[', '%5B').replace(']', '%5D')\n    def get(self, url): return self.toJson(self.context.request(operation='GET', link=self.encode(url), body=''))\n    def post(self, url, data): return self.toJson(self.context.request(operation='POST', link=self.encode(url), body=data))\n    def put(self, url, data): return self.toJson(self.context.request(operation='PUT', link=self.encode(url), body=data))\n    def patch(self, url, data): return self.toJson(self.context.request(operation='PATCH', link=self.encode(url), body=data))\n    def delete(self, url, data=''): return self.toJson(self.context.request(operation='DELETE', link=self.encode(url), body=data))\n    def getUerp(self, url): return self.get(f'/provisioning/uerp{url}')\n    def postUerp(self, url, data): return self.post(f'/provisioning/uerp{url}', data)\n    def putUerp(self, url, data): return self.put(f'/provisioning/uerp{url}', data)\n    def patchUerp(self, url, data): return self.patch(f'/provisioning/uerp{url}', data)\n    def deleteUerp(self, url, data=''): return self.delete(f'/provisioning/uerp{url}', data)\n    def runOrchAction(self, projectId, uri, data={}):\n        result = self.post(f'/form-service/api/forms/renderer/external-value?projectId={projectId}', {'uri':uri, 'dataSource':'scriptAction', 'parameters':[{'name':k, 'value':v} for k, v in data.items()]})\n        if 'data' in result: return result['data']\n        elif 'error' in result: raise Exception(result['error']['summaryMessage'])\n        else: raise Exception('unknown error')\n\n\n#===============================================================================\n# Implement Handler Here\n# ------------------------------------------------------------------------------\n# Default : apiVersion :  2021-07-15\n#===============================================================================\ndef handler(context, inputs):\n    apiVersion = '2021-07-15'\n\n    aa = AaManager(context)\n    \n    # delete resource\n    aa.delete('/codestream/api/endpoints/' + inputs['id'])\n    if inputs['clusterType'] == 'external': aa.delete(inputs['cluster'])\n    \n    # publish null resource\n    return {}\n",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 512,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca3019535eefa0b02bf",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca3019535eefa0b02bf?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  },
  "8a74809294779ca3019535f02fe302c0": {
    "name": "Custom.Kubernetes.read",
    "createdMillis": 1740366688230,
    "updatedMillis": 1742811081055,
    "metadata": {
      "actionIsRetriable": false
    },
    "runtime": "python",
    "source": "# -*- coding: utf-8 -*-\r\n'''\r\n@copyright: Equal Plus\r\n@author: Hye-Churn Jang\r\n'''\r\n\r\n#===============================================================================\r\n# Import Libraries Here\r\n#===============================================================================\r\n\r\n\r\n#===============================================================================\r\n# Implement Handler Here\r\n#===============================================================================\r\ndef handler(context, inputs):\r\n    # bypass resource\r\n    return inputs",
    "entrypoint": "handler",
    "description": "install by value pack at 20250324-191120",
    "inputs": {},
    "cpuShares": 1024,
    "memoryInMB": 300,
    "showMemoryAlert": false,
    "timeoutSeconds": 600,
    "deploymentTimeoutSeconds": 900,
    "actionType": "SCRIPT",
    "provider": "on-prem",
    "configuration": {
      "const_azure-system_managed_identity": false
    },
    "system": false,
    "shared": true,
    "asyncDeployed": false,
    "runtimeVersion": "3.10",
    "id": "8a74809294779ca3019535f02fe302c0",
    "orgId": "72289d0c-8e6c-4825-ad70-89208f5c1e75",
    "projectId": "aa0ba574-aec3-4c69-88d0-6bbb1964e8ae",
    "selfLink": "/abx/api/resources/actions/8a74809294779ca3019535f02fe302c0?projectId=aa0ba574-aec3-4c69-88d0-6bbb1964e8ae"
  }
}