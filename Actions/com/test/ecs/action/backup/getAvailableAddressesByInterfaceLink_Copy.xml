<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="getAvailableAddressesByInterfaceLink_Copy" result-type="Array/string" api-version="6.0.0" id="1a49b26c-a8aa-4a51-964c-37bb3d80a11c" version="0.1.0" allowed-operations="vfe" category-name="com.test.ecs.action.backup">
  <description><![CDATA[Act:Change IP Address]]></description>
  <param n="interfaceLink" t="string"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[if (interfaceLink == "permanent") { return []; }
var conv = System.getModule("com.test.ecs.common").Converter();
var aa = System.getModule("com.ecs").AaManager(true);
var subnetRanges = aa.getUerp("/provisioning/mgmt/subnet-range?$filter=subnetLink eq '" + aa.getUerp(interfaceLink).subnetLink + "'")
var result = [];
for each(var subnetRangeLink in subnetRanges.documentLinks) {
    var subnetRange = subnetRanges.documents[subnetRangeLink];
    var startIpNumeric = conv.ip.getNumeric(subnetRange.startIPAddress);
    var endIpNumeric = conv.ip.getNumeric(subnetRange.endIPAddress);
    var usedIpAddresses = aa.getUerp("/resources/ip-addresses?expand&$filter=(subnetRangeLink eq '" + subnetRangeLink + "') and (ipAddressStatus ne 'AVAILABLE')");
    var used = [];
    for each(var usedIpAddressLink in usedIpAddresses.documentLinks) {
        used.push(conv.ip.getNumeric(usedIpAddresses.documents[usedIpAddressLink].ipAddress));
    }
    for (var ip = startIpNumeric; ip <= endIpNumeric; ip++) {
        if (used.indexOf(ip) < 0) { result.push(conv.ip.getString(ip)); }
    }
}
return result;]]></script>
</dunes-script-module>