<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item1" object-name="workflow:name=generic" id="7070395d-e818-4b5d-9b3b-361ccf3c8621" editor-version="2.0" version="0.0.1" api-version="6.0.0" restartMode="1" resumeFromFailedMode="0">
    <display-name>자원 삭제</display-name>
    <position y="50.0" x="100.0"/>
    <input>
        <param name="_metadata_main_catalog" type="string"/>
        <param name="_metadata_catalog" type="string"/>
        <param name="resourceType" type="string"/>
        <param name="resourceIds" type="Array/string"/>
        <param name="requestMessage" type="string"/>
        <param name="resourceId" type="string"/>
        <param name="_admin_project_name" type="string"/>
    </input>
    <output/>
    <workflow-item name="item0" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="50.0" x="360.0"/>
    </workflow-item>
    <workflow-item name="item1" out-name="item0" type="task" comparator="0">
        <display-name>Scriptable task</display-name>
        <script encoded="false">var aa = System.getModule("com.bvp").AaManager(true);
var requestIds = [];

// resourceId와 resourceIds 중 하나는 반드시 있어야 함
if(!resourceIds &amp;&amp; !resourceId){ 
    throw "Cannot Empty Resource Ids"
};
if(!resourceType){ 
    throw "Cannot Empty Resource Type"
};

// 단일 resourceId를 배열로 변환하여 통일된 처리
var resourcesToProcess = [];
if(resourceId) {
    resourcesToProcess = [resourceId]; // 단일 리소스를 배열로 변환
} else if(resourceIds) {
    resourcesToProcess = resourceIds; // 복수 리소스 배열 사용
}

if(resourceType == "Cloud.vSphere.Machine"){
    for each(var resource in resourcesToProcess){
        var machine = aa.get("/deployment/api/resources/" + resource);
        var deploymentId = machine.deploymentId;
        var deploymentResources = aa.get("/deployment/api/deployments/" + deploymentId + "/resources").content;
        var count = 0;
        for each(var deploymentResource in deploymentResources){
            if(deploymentResource.type == "Cloud.vSphere.Machine"){
                count += 1;
            }
        }

        if(VcPlugin.getAllVirtualMachines(null, "xpath:name=\'"+ machine.name + "\'")[0].state == "poweredOn"){
            throw System.warn("Cannot Delete VM. Because VM is Powered ON");
        } else if(count &gt;= 2) {
            var result = aa.delete("/deployment/api/deployments/"+ deploymentId +"/resources/"+ resource);
            requestIds.push(result.id)
        } else {
            var result = aa.delete("/deployment/api/deployments/" + deploymentId);
            requestIds.push(result.id)
        }
    }
} else if(resourceType == "Custom.Project"){
    var customProjects = aa.get("/deployment/api/resources?resourceTypes=Custom.Project").content;
    for each(var resource in resourcesToProcess){
        var pjtActionResources = aa.get("/deployment/api/resources?resourceTypes=vro.workflow&amp;projects="+ resource);
        if(pjtActionResources.totalElements &gt; 0){
            var delRequestIds = [];
            for(var i = 0; i &lt; pjtActionResources.totalPages ; i++){
                var actionResources = aa.get("/deployment/api/resources?resourceTypes=vro.workflow&amp;page=" + i + "&amp;projects="+ resource).content;
                for(var a in actionResources){
                    var delReq = aa.delete("/deployment/api/deployments/" + actionResources[a].deploymentId);
                    delRequestIds.push(delReq.id);
                }
            }
            var allSuccessful = false;
            var count = 0;
            while (!allSuccessful) {
                allSuccessful = true; // 매 루프마다 초기화
                var statuses = [];

                for (var i = 0; i &lt; delRequestIds.length; i++) {
                    var requestId = delRequestIds[i];
                    var result = aa.get("/deployment/api/requests/" + requestId);
                    statuses.push(result.status);

                    if (result.status !== "SUCCESSFUL") {
                        allSuccessful = false;
                    }
                    if (result.status == "FAILED"){
                        throw "FAILED : " + result.details
                    }
                }

                count++;
                if (count &gt; 20) {
                    throw "Waiting Time out"
                }
                // Optional: 너무 빠른 루프 방지
                System.sleep(5000); // 5초 대기
            }
        }

        var pjtResource = customProjects.filter( function(item){
            return item.properties.selfId == resource;
        })[0]
        var result = aa.delete("/deployment/api/deployments/" + pjtResource.deploymentId );
        requestIds.push(result.id);
    };


} else {
    for each(var resource in resourcesToProcess){
        var rs = aa.get("/deployment/api/resources/" + resource);
        var result = aa.delete("/deployment/api/deployments/" + rs.deploymentId );
        requestIds.push(result.id);
    }
}

var allSuccessful = false;
var count = 0;
while (!allSuccessful) {
    allSuccessful = true; // 매 루프마다 초기화
    var statuses = [];

    for (var i = 0; i &lt; requestIds.length; i++) {
        var requestId = requestIds[i];
        var result = aa.get("/deployment/api/requests/" + requestId);
        statuses.push(result.status);

        if (result.status !== "SUCCESSFUL") {
            allSuccessful = false;
        }
        if (result.status == "FAILED"){
            throw "FAILED : " + result.details
        }
    }

    count++;
    if (count &gt; 20) {
        throw "Waiting Time out"
    }
    // Optional: 너무 빠른 루프 방지
    System.sleep(5000); // 5초 대기
}</script>
        <in-binding>
            <bind name="resourceType" type="string" export-name="resourceType"/>
            <bind name="resourceIds" type="Array/string" export-name="resourceIds"/>
            <bind name="resourceId" type="string" export-name="resourceId"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="70.5" x="180.0"/>
    </workflow-item>
</ns2:workflow>
