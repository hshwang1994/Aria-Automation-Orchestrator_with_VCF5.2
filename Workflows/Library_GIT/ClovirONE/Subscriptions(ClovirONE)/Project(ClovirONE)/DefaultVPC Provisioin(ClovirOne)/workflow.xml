<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item14" object-name="workflow:name=generic" id="6fdfcf00-8380-46d4-85f0-0e622e9e9b00" version="0.0.0" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[DefaultVPC Provisioin(ClovirOne)]]></display-name>
  <position y="50.0" x="80.0"/>
  <input>
    <param name="inputProperties" type="Properties"/>
  </input>
  <attrib name="sleepTime" type="number" read-only="false">
    <value encoded="n"><![CDATA[1.0]]></value>
  </attrib>
  <attrib name="count" type="number" read-only="false">
    <value encoded="n"><![CDATA[0.0]]></value>
  </attrib>
  <attrib name="postResult" type="Array/Properties" read-only="false">
    <value encoded="n"><![CDATA[[]]]></value>
  </attrib>
  <attrib name="vpcDeploymentStatus" type="Array/Properties" read-only="false">
    <value encoded="n"><![CDATA[[]]]></value>
  </attrib>
  <attrib name="deploymentStatus" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <in-binding/>
    <position y="60.0" x="680.0"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item0" type="task">
    <display-name><![CDATA[Create VPC]]></display-name>
    <script encoded="false"><![CDATA[// API 모듈 가져오기
var aa = System.getModule("com.ecs").AaManager(true);
// VPC 카탈로그 아이템 ID 가져오기
var catalogItems = aa.get("/catalog/api/items").content
var catalogItemId = null;
for each(var c in catalogItems){
    if(c.name == "Virtual Private Cloud(ClovirOne)"){
        catalogItemId = c.id;
    }
}
// 생성된 프로젝트 리소스 정보 가져오기
var pjtResource = aa.get("/deployment/api/deployments/"+ inputProperties.deploymentId +"/resources").content[0];
var result = [];
// VPC 생성을 위한 변수 설정
var projectId = pjtResource.properties.selfId; // 생성된 프로젝트의 ID 가져오기
var projectName = pjtResource.properties.name; // 생성된 Project의 이름 (not DisplayName, Description)
var requestMessage = inputProperties.requestInputs.requestMessage; // 프로젝트 생성 시 작성된 요청 메세지 사용
var metadata_catalog = "VPC";
var metadata_category = "Network";
var metadata_available = "vpc member";
var managed_network_cidr = "172.31.255.0/24";
var metadata_resource_type = "Custom.VPC";
var catalogVersion = aa.get("/catalog/api/items/" + catalogItemId + "/versions").content[0].id; // catalog의 최신 버전 가져오기
// cloudZone 별 vpcinfraprofile 마다 vpc 생성
var cloudZoneIdArray = pjtResource.properties.cloudZones;

//try {
//    aa.patch("/project-service/api/projects/" + projectId + "/principals",{
//        "modify" : [
//            {
//                "email" : "admin", 
//                "role" : "administrator", 
//                "type" : "user"
//            }
//        ]
//    });
//    System.sleep(5000);
//} catch(e){
//    System.warn("/iaas/api/project api triggered message : " + e);
//}
var statusCount = 0;
var maxRetries = 30; // 최대 재시도 횟수
var statusCheck = true; // ✅ while 루프 제어 변수 추가

while (statusCheck) { 
    try {
        var itemProjects = aa.get("/catalog/api/items/" + catalogItemId).projectIds;

        for each (var itemProject in itemProjects) {
            System.log("item project : " + itemProject + "  /   selfProjectId : " + projectId);
            if (itemProject == projectId) {
                statusCheck = false; // ✅ 프로젝트 확인되면 while 루프 종료
                break; // ✅ for each 루프 탈출
            }
        }

        if (!statusCheck) break; // ✅ while 루프까지 완전히 탈출

        if (statusCount >= maxRetries) {
            throw new Error("Status Check Timeout"); // 명확한 예외 처리
        }

        statusCount++;
        System.log("Catalog item project check retry.. " + statusCount);
        System.sleep(10000);

    } catch (e) {
        throw new Error("Error: " + e); // 예외 발생 시 즉시 종료
    }
}


var attempt = 0;
var maxRetries = 30;
var cidrCount = 0;
function toTwoDigit(num) {
    return num < 10 ? '0' + num : '' + num;
}

for(var i=0; i < cloudZoneIdArray.length; i++){
    var placementZoneLink = "/provisioning/resources/placement-zones/" + cloudZoneIdArray[i];// 프로젝트 생성시 선택한 가용성 영역에 대한 placementZoneLink 가져오기
    var vpcInfraProfileLinkArray = System.getModule("com.ecs.action").getVpcInfraProfilesByPlacementZoneLink(placementZoneLink); // vpcInfraProfileLink 가져오기 [1].value;
    if(vpcInfraProfileLinkArray != null){
        for(var j=0; j < vpcInfraProfileLinkArray.length; j++){
            var vpcInfraId = System.getModule("com.ecs.action").getVpcInfraIdByProfileLink(vpcInfraProfileLinkArray[j].value);
            var codeName = System.getModule("com.ecs.action").getRandomString(type="lowerDigit",length="8");
            var deploymentName = "VPC: " + projectName + "-" + codeName; // deployment 이름 생성
            var displayName = "Default-VPC-" + pjtResource.properties.displayName + "-" + vpcInfraProfileLinkArray[j].label; // VPC Custom Resource의 이름 및 생성되는 Network Profile Description
            while (attempt < maxRetries){
                try {
                        var requestVpcCatalog = aa.post("/catalog/api/items/"+ catalogItemId +"/request",{
                        "projectId": projectId,
                        "version": catalogVersion,
                        "deploymentName" : deploymentName,
                        "inputs": {
                            "codeName" : codeName,
                            "_project_id" : projectId,
                            "displayName": displayName,
                            "_project_name" : projectName,
                            "_vpc_infra_id" : vpcInfraId,
                            "placementZone" : placementZoneLink,
                            "requestMessage": requestMessage,
                            "vpcInfraProfile" : vpcInfraProfileLinkArray[j].value,
                            "_metadata_catalog" : metadata_catalog,
                            "_metadata_category" : metadata_category,
                            "_metadata_available" : metadata_available,
                            "_managed_network_cidr" : managed_network_cidr,
                            "_metadata_resource_type" : metadata_resource_type,
                            "createByDefault" : true,
                            "defaultCidr" : "10.100.1" + toTwoDigit(cidrCount) + ".0/24"
                            }
                        });
                    cidrCount++;
                    result.push(requestVpcCatalog[0]);
                    System.sleep(1000);
                    break;
                } catch (e){
                System.log(" retry " + (attempt + 1) + " fail, retry... Error Message : " + e);
                attempt++;
                System.sleep(10000); // 10초 대기 후 재시도
                }
            }
        }
    }

}

var deploymentInfo = [];
for each(var r in result){
    deploymentInfo.push(r.deploymentId);
}
var addedDeploymentIds = deploymentInfo.toString();
var resourceActions = aa.get("/deployment/api/resources/" + pjtResource.id + "/actions");
var appendActionId = "";
for each(var resourceAction in resourceActions){
    if(resourceAction.name == "appendDeploymentIds"){
        appendActionId = resourceAction.id;
    }
}
var update = aa.post("/deployment/api/resources/"+ pjtResource.id + "/requests",{
    "actionId": appendActionId,
    "inputs": {
        "deploymentIds": addedDeploymentIds
    }
});


postResult = result;]]></script>
    <in-binding>
      <bind name="inputProperties" type="Properties" export-name="inputProperties"/>
    </in-binding>
    <out-binding>
      <bind name="postResult" type="Array/Properties" export-name="postResult"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="80.0" x="380.0"/>
  </workflow-item>
  <workflow-item name="item12" out-name="item9" type="condition" alt-out-name="item15" comparator="0">
    <display-name><![CDATA[Decision]]></display-name>
    <script encoded="false"><![CDATA[// Generated by the system, cannot be edited
return (deploymentStatus === true);]]></script>
    <in-binding>
      <bind name="deploymentStatus" type="boolean" export-name="deploymentStatus"/>
    </in-binding>
    <out-binding/>
    <condition name="deploymentStatus" type="boolean" comparator="0" label="null"/>
    <description><![CDATA[Custom decision based on a custom script.]]></description>
    <position y="50.0" x="260.0"/>
  </workflow-item>
  <workflow-item name="item13" prototype-id="sleep" out-name="item14" content-mode="x" type="task">
    <display-name><![CDATA[Sleep]]></display-name>
    <script encoded="false"><![CDATA[//Auto-generated script
if ( sleepTime !== null )  {
	System.sleep(sleepTime * 1000);
}else  {
	throw "'sleepTime' is NULL"; 
}]]></script>
    <in-binding>
      <bind name="sleepTime" type="number" export-name="sleepTime">
        <description><![CDATA[Time to sleep in seconds]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Sleep a given number of seconds.]]></description>
    <position y="160.0" x="140.0"/>
  </workflow-item>
  <workflow-item name="item14" out-name="item12" type="task">
    <display-name><![CDATA[check Deployment Success]]></display-name>
    <script encoded="false"><![CDATA[//CREATE_SUCCESSFUL
var aa = System.getModule("com.ecs").AaManager(true);

if (aa.get("/deployment/api/deployments/"+inputProperties.deploymentId).status === "CREATE_SUCCESSFUL"){
    deploymentStatus = true;
} else if(count >= 10){
    throw System.error("Project Deployment Create Timeout")
}]]></script>
    <in-binding>
      <bind name="inputProperties" type="Properties" export-name="inputProperties"/>
      <bind name="count" type="number" export-name="count"/>
    </in-binding>
    <out-binding>
      <bind name="deploymentStatus" type="boolean" export-name="deploymentStatus"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="140.0"/>
  </workflow-item>
  <workflow-item name="item15" prototype-id="increase-counter" out-name="item13" content-mode="x" type="task">
    <display-name><![CDATA[Increase counter]]></display-name>
    <script encoded="false"><![CDATA[//Auto-generated script
counter = counter + 1;]]></script>
    <in-binding>
      <bind name="counter" type="number" export-name="count">
        <description><![CDATA[Item to increase]]></description>
      </bind>
    </in-binding>
    <out-binding>
      <bind name="counter" type="number" export-name="count">
        <description><![CDATA[Increased item]]></description>
      </bind>
    </out-binding>
    <description><![CDATA[Increment a counter by one.]]></description>
    <position y="160.0" x="260.0"/>
  </workflow-item>
  <presentation/>
</workflow>